theme(
axis.title.x = element_text(size = 24),
axis.title.y = element_text(size = 24),
title = element_text(size=26),
axis.text = element_text(size = 22),
)
ggsave(paste0(args$outputdir,'/protein/results/filtering/IsotypeIgG1.png'))
data.frame(isotype1 = fractionOfIsotypeIgG2b, isotype2 = fractionOfIsotypeIgG1, isotype3 =fractionOfIsotypeIgG2a) %>%
ggplot(aes(x = isotype3)) +
geom_histogram(bins = 100) +
geom_vline(xintercept = mean(fractionOfIsotypeIgG2a) + 4 * sd(fractionOfIsotypeIgG2a), linetype = "dashed", color = "darkturquoise", size=1.5) +
ggtitle("Histogram of fractions of reads attributed to isotype control") +
xlab("Isotype IgG2a") +
ylab("Cell count") +
annotate("text", x = mean(fractionOfIsotypeIgG2b) + 4 * sd(fractionOfIsotypeIgG2b) + 0.05,
y=max(table(fractionOfIsotypeIgG2b)) / 2, label="Filtering cutoff value",
angle=90, size = 10, color = "darkturquoise") +
scale_x_continuous(limits = c(-0.01, 1)) +
theme(
axis.title.x = element_text(size = 24),
axis.title.y = element_text(size = 24),
title = element_text(size=26),
axis.text = element_text(size = 22)
)
ggsave(paste0(args$outputdir,'/protein/results/filtering/IsotypeIgG2a.png'))
data.frame(isotype1 = fractionOfIsotypeIgG2b, isotype2 = fractionOfIsotypeIgG1, isotype3 =fractionOfIsotypeIgG2a) %>%
ggplot(aes(x = log(isotype3), y = log(isotype2))) +
geom_point()
data.frame(isotype1 = fractionOfIsotypeIgG2b, isotype2 = fractionOfIsotypeIgG1, isotype3 =fractionOfIsotypeIgG2a) %>%
ggplot(aes(x = log(isotype1), y = log(isotype2))) +
geom_point()
#filter cells with extreme isotype expression (in the future this may be changed to extreme values relative to entire expression)
filter_out <- fractionOfIsotypeIgG1 >  mean(fractionOfIsotypeIgG1) + 4 * sd(fractionOfIsotypeIgG1)
filter_out <- filter_out | ( fractionOfIsotypeIgG2b > (mean(fractionOfIsotypeIgG2b) + 4 * sd(fractionOfIsotypeIgG2b)) )
filter_out <- filter_out | ( fractionOfIsotypeIgG2a > (mean(fractionOfIsotypeIgG2a) + 4 * sd(fractionOfIsotypeIgG2a)) )
#filter doublets
filter_out <- filter_out | ( ( cluster_assignment %>% sapply(FUN = nchar) ) > 1 )
clusterIDs <- unique(cluster_assignment[nchar(cluster_assignment) == 1])
doublets_data <- data.frame(clusterIDs = clusterIDs,
doubletRates = sapply(clusterIDs, FUN = approximate_doublet_rate, cluster_assignment),
row.names = 1:args$nClusters)
#print("Writing to file:")
write_h5(args$sample, doublets_data, count_matrix, filter_out, cluster_assignment)
}
main(args)
library(argparse, quietly = TRUE)
#library(hdf5r, quietly = TRUE)
library(rhdf5, quietly = TRUE)
library(tidyverse, quietly = TRUE)
options(try.outFile = stdout())
args <- list(sample = "~/Desktop/BuildServer1/INTeRCePT/pipeline_output/GFB-8692_GFB-8698_out/GFB-8692_GFB-8698.dna+protein.h5.filtered",
outputdir = "~/Desktop/BuildServer1/INTeRCePT/pipeline_output/GFB-8692_GFB-8698_out/", nClusters = 4)
#'
#' @param file.h5
#' @param sample Name of the h5 file to write to
#' @param path path  to the new dataset in the h5 file
#' @param dataset dataset to be written to h5 file
#'
#' @return
#' @export
#'
#' @examples
add_dataset_to_h5 <- function(sample, path, dataset)  {
try({
h5write(dataset, sample,path)
return()
#file.h5[[paste(path, dataset_name, sep = "/")]] <- dataset
}, silent = TRUE)
h5delete(file = sample, name = path)
h5write(dataset, sample,path)
#file.h5[[path]]$link_delete(dataset_name)
#file.h5[[paste(path, dataset_name, sep = "/")]] <- dataset
}
#' Loads an h5-file and adds the sample assignment from the demultiplexing to it
#' if applicable
#'
#' @param args
#'
#' @return count_matrix: a data frame with the dsb-normalised counts.
#' cluster_assignment: A vector with the assignment of cells to sample clusters
#' @export
#'
#' @examples
load_data <- function(args){
print("Loading h5-file:")
file.h5 <- H5Fopen(args$sample)
#file.h5 <- H5File$new(args$sample, mode = "r+")
print(file.h5)
count_matrix <- file.h5$'/assays/protein_read_counts/layers/read_counts'
#loading_time <- system.time(count_matrix <- file.h5[["assays/protein_read_counts/layers/read_counts"]][,])
protein_list  <- file.h5$'/assays/protein_read_counts/ca/id'
#protein_list  <- file.h5[["assays/protein_read_counts/ca/id"]][]
barcode_list <- file.h5$'/assays/protein_read_counts/ra/barcode'
#barcode_list <- file.h5[["assays/protein_read_counts/ra/barcode"]][]
sample_name <- file.h5$'/assays/protein_read_counts/ra/sample_name'[1]
#sample_name <- file.h5[["assays/protein_read_counts/ra/sample_name"]][1]
h5closeAll()
if(args$nClusters > 1){
sample_assignment_file <- sprintf("%s/demultiplexing/%s.cells_variants.assignments.tsv",dirname(args$sample),sample_name)
sample_assignment <- read_delim(sample_assignment_file,  delim = "\t") %>%
as.list %>%
lapply(FUN =as.character) %>%
unlist()
sample_assignment <- sample_assignment[2:length(sample_assignment)]
print('Writing sample assignment to h5-file')
add_dataset_to_h5(args$sample, 'assays/protein_read_counts/ra/cluster_assignment', sample_assignment)
#file.h5$'/assays/protein_read_counts/ra/cluster_assignment' <- sample_assignment
print('Done')
}
else{
sample_assignment <- rep('1', ncol(count_matrix))
}
count_matrix <- as.data.frame(t(count_matrix), row.names = barcode_list)
colnames(count_matrix) <- protein_list
#file.h5$close_all()
return(list(data = count_matrix, cluster_assignment =sample_assignment))
}
#' Computes an estimate of the intra-cluster doublet rate
#'
#' @param cluster_assignment a character vector assigning each cell to a cluster
#' "1", "2", "1+2" and so forth
#' @param clusterID one of the cluster identities as character - must be of the form "1", "2" ,...
#'
#' @return The estiated doublet rate as a numeric value
#' @export
#'
#' @examples
approximate_doublet_rate <- function(clusterID,cluster_assignment){
fraction_of_cluster <- sum(cluster_assignment == clusterID)/sum(sapply(cluster_assignment, FUN = nchar)==1)
#solving the equation (1-fraction_of_cluster) * (doubletrate involving $clusterID) =
# (observed doubletrate involving $clusterID)
observed_doublet_involving_clusterID <-  sum(( ( cluster_assignment %>% sapply(FUN = nchar) ) > 1 ) &
grepl(clusterID, x = cluster_assignment, fixed = TRUE)) /
sum(grepl(clusterID, x = cluster_assignment, fixed = TRUE))
return((fraction_of_cluster/(1-fraction_of_cluster)) * observed_doublet_involving_clusterID)
}
#' @param samplename Full path to h5 file
#' @param doublets_data
#' @param count_matrix
#' @param filter_out
#' @param cluster_assignment
#'
#' @return
#' @export
#'
#' @examples
write_h5 <- function(samplename, doublets_data, count_matrix, filter_out, cluster_assignment){
#new_samplename <- paste0(args$sample,".filtered")
#file.h5 <- H5Fopen(samplename)
#file.h5 <- H5File$new(new_samplename, mode = "r+")
print("Writing doublet data to h5 file:")
#file.h5$'/metadata/doublet_rates' <- doublets_data
add_dataset_to_h5(samplename, 'metadata/doublet_rates', doublets_data)
#add_dataset_to_h5(file.h5, "metadata","doublet_rates", doublets_data)
print("Done")
try({h5createGroup(samplename,'assays/protein_read_counts_filtered')}, silent = TRUE)
#file.h5$create_group("assays/protein_read_counts_filtered")
try({h5createGroup(samplename,'assays/protein_read_counts_filtered/layers')},silent = TRUE)
#file.h5$create_group("assays/protein_read_counts_filtered/layers")
print("Writing filtered read counts to h5 file:")
print(count_matrix %>% filter(!filter_out) %>% as.matrix() %>% t())
#file.h5$'/assays/protein_read_counts_filtered/layers/read_counts_filtered' <-
#  count_matrix %>% filter(!filter_out) %>% as.matrix() %>% t()
add_dataset_to_h5(samplename, 'assays/protein_read_counts_filtered/layers/read_counts_filtered',
count_matrix %>% filter(!filter_out) %>% as.matrix() %>% t())
#h5delete(file = args$sample, name = "metadata/doublet_rates")
print("Done")
#add_dataset_to_h5(file.h5, "assays/protein_read_counts_filtered/layers","read_counts_filtered",
#                  count_matrix %>% filter(!filter_out) %>% as.matrix() %>% t())
print("Writing filter mask to h5 file:")
print(filter_out)
#file.h5$'/assays/protein_read_counts/ra/filter' <- filter_out
add_dataset_to_h5(samplename, 'assays/protein_read_counts/ra/filter', filter_out)
print("Done")
#add_dataset_to_h5(file.h5, "assays/protein_read_counts/ra","filter", filter_out)
h5createGroup(samplename,'assays/protein_read_counts_filtered/ra')
#file.h5$create_group("assays/protein_read_counts_filtered/ra")
print("Writing filtered barcodes to h5 file:")
print(rownames(count_matrix)[!filter_out])
#file.h5$'/assays/protein_read_counts_filtered/ra/barcode' <- rownames(count_matrix)[!filter_out]
add_dataset_to_h5(samplename, 'assays/protein_read_counts_filtered/ra/barcode', rownames(count_matrix)[!filter_out])
print("Done")
#add_dataset_to_h5(file.h5, "assays/protein_read_counts_filtered/ra","barcode", rownames(count_matrix)[!filter_out])
print("Writing cluster assignment to h5 file:")
print(cluster_assignment[!filter_out])
#file.h5$'/assays/protein_read_counts_filtered/ra/cluster_assignment' <- cluster_assignment[!filter_out]
add_dataset_to_h5(samplename, 'assays/protein_read_counts_filtered/ra/cluster_assignment', cluster_assignment[!filter_out])
print("Done")
#add_dataset_to_h5(file.h5, "assays/protein_read_counts_filtered/ra","cluster_assignment", cluster_assignment[!filter_out])
#file.h5$close_all()
#h5closeAll()
}
main <- function(args){
#system(sprintf("cp %s %s.filtered", args$sample,args$sample))## move this to the call on the snakemake rule
data_full <- load_data(args)
count_matrix <- data_full$data
cluster_assignment <- data_full$cluster_assignment
fractionOfIsotypeIgG2b <- count_matrix$Isotype_IgG2b / apply(count_matrix, MARGIN = 1, FUN = sum)
fractionOfIsotypeIgG2a <- count_matrix$Isotype_IgG2a / apply(count_matrix, MARGIN = 1, FUN = sum)
fractionOfIsotypeIgG1 <- count_matrix$Isotype_IgG1 / apply(count_matrix, MARGIN = 1, FUN = sum)
data.frame(isotype1 = fractionOfIsotypeIgG2b, isotype2 = fractionOfIsotypeIgG1, isotype3 =fractionOfIsotypeIgG2a) %>%
ggplot(aes(x = isotype1)) +
geom_histogram(bins = 100) +
geom_vline(xintercept = mean(fractionOfIsotypeIgG2b) + 4 * sd(fractionOfIsotypeIgG2b), linetype = "dashed", color = "darkturquoise", size=1.5) +
ggtitle("Histogram of fractions of reads attributed to isotype control") +
xlab("Isotype IgG2b") +
ylab("Cell count") +
annotate("text",
x = mean(fractionOfIsotypeIgG2b) + 4 * sd(fractionOfIsotypeIgG2b) + 0.05,
y=max(table(fractionOfIsotypeIgG2b)) / 2, label="Filtering cutoff value",
angle=90, size = 10, color = "darkturquoise") +
scale_x_continuous(limits = c(-0.01, 1)) +
theme(
axis.title.x = element_text(size = 24),
axis.title.y = element_text(size = 24),
title = element_text(size=26),
axis.text = element_text(size = 22)
)
ggsave(paste0(args$outputdir,'/protein/results/filtering/IsotypeIgG2b.png'))
data.frame(isotype1 = fractionOfIsotypeIgG2b, isotype2 = fractionOfIsotypeIgG1, isotype3 =fractionOfIsotypeIgG2a) %>%
ggplot(aes(x = isotype2)) +
geom_histogram(bins = 100) +
geom_vline(xintercept = mean(fractionOfIsotypeIgG1) + 4 * sd(fractionOfIsotypeIgG1), linetype = "dashed", color = "darkturquoise", size=1.5) +
ggtitle("Histogram of fractions of reads attributed to isotype control") +
xlab("Isotype IgG1") +
ylab("Cell count") +
annotate("text", x = mean(fractionOfIsotypeIgG2b) + 4 * sd(fractionOfIsotypeIgG2b) + 0.05,
y=max(table(fractionOfIsotypeIgG2b)) / 2, label="Filtering cutoff value",
angle=90, size = 10, color = "darkturquoise") +
scale_x_continuous(limits = c(-0.01, 1)) +
theme(
axis.title.x = element_text(size = 24),
axis.title.y = element_text(size = 24),
title = element_text(size=26),
axis.text = element_text(size = 22),
)
ggsave(paste0(args$outputdir,'/protein/results/filtering/IsotypeIgG1.png'))
data.frame(isotype1 = fractionOfIsotypeIgG2b, isotype2 = fractionOfIsotypeIgG1, isotype3 =fractionOfIsotypeIgG2a) %>%
ggplot(aes(x = isotype3)) +
geom_histogram(bins = 100) +
geom_vline(xintercept = mean(fractionOfIsotypeIgG2a) + 4 * sd(fractionOfIsotypeIgG2a), linetype = "dashed", color = "darkturquoise", size=1.5) +
ggtitle("Histogram of fractions of reads attributed to isotype control") +
xlab("Isotype IgG2a") +
ylab("Cell count") +
annotate("text", x = mean(fractionOfIsotypeIgG2b) + 4 * sd(fractionOfIsotypeIgG2b) + 0.05,
y=max(table(fractionOfIsotypeIgG2b)) / 2, label="Filtering cutoff value",
angle=90, size = 10, color = "darkturquoise") +
scale_x_continuous(limits = c(-0.01, 1)) +
theme(
axis.title.x = element_text(size = 24),
axis.title.y = element_text(size = 24),
title = element_text(size=26),
axis.text = element_text(size = 22)
)
ggsave(paste0(args$outputdir,'/protein/results/filtering/IsotypeIgG2a.png'))
data.frame(isotype1 = fractionOfIsotypeIgG2b, isotype2 = fractionOfIsotypeIgG1, isotype3 =fractionOfIsotypeIgG2a) %>%
ggplot(aes(x = log(isotype3), y = log(isotype2))) +
geom_point()
data.frame(isotype1 = fractionOfIsotypeIgG2b, isotype2 = fractionOfIsotypeIgG1, isotype3 =fractionOfIsotypeIgG2a) %>%
ggplot(aes(x = log(isotype1), y = log(isotype2))) +
geom_point()
#filter cells with extreme isotype expression (in the future this may be changed to extreme values relative to entire expression)
filter_out <- fractionOfIsotypeIgG1 >  mean(fractionOfIsotypeIgG1) + 4 * sd(fractionOfIsotypeIgG1)
filter_out <- filter_out | ( fractionOfIsotypeIgG2b > (mean(fractionOfIsotypeIgG2b) + 4 * sd(fractionOfIsotypeIgG2b)) )
filter_out <- filter_out | ( fractionOfIsotypeIgG2a > (mean(fractionOfIsotypeIgG2a) + 4 * sd(fractionOfIsotypeIgG2a)) )
#filter doublets
filter_out <- filter_out | ( ( cluster_assignment %>% sapply(FUN = nchar) ) > 1 )
clusterIDs <- unique(cluster_assignment[nchar(cluster_assignment) == 1])
doublets_data <- data.frame(clusterIDs = clusterIDs,
doubletRates = sapply(clusterIDs, FUN = approximate_doublet_rate, cluster_assignment),
row.names = 1:args$nClusters)
#print("Writing to file:")
write_h5(args$sample, doublets_data, count_matrix, filter_out, cluster_assignment)
}
main(args)
library(argparse, quietly = TRUE)
#library(hdf5r, quietly = TRUE)
library(rhdf5, quietly = TRUE)
library(tidyverse, quietly = TRUE)
options(try.outFile = stdout())
args <- list(sample = "~/Desktop/BuildServer1/INTeRCePT/pipeline_output/GFB-8692_GFB-8698_out/GFB-8692_GFB-8698.dna+protein.h5.filtered",
outputdir = "~/Desktop/BuildServer1/INTeRCePT/pipeline_output/GFB-8692_GFB-8698_out/", nClusters = 4)
#'
#' @param file.h5
#' @param sample Name of the h5 file to write to
#' @param path path  to the new dataset in the h5 file
#' @param dataset dataset to be written to h5 file
#'
#' @return
#' @export
#'
#' @examples
add_dataset_to_h5 <- function(sample, path, dataset)  {
try({
h5write(dataset, sample,path)
return()
#file.h5[[paste(path, dataset_name, sep = "/")]] <- dataset
}, silent = TRUE)
h5delete(file = sample, name = path)
h5write(dataset, sample,path)
#file.h5[[path]]$link_delete(dataset_name)
#file.h5[[paste(path, dataset_name, sep = "/")]] <- dataset
}
#' Loads an h5-file and adds the sample assignment from the demultiplexing to it
#' if applicable
#'
#' @param args
#'
#' @return count_matrix: a data frame with the dsb-normalised counts.
#' cluster_assignment: A vector with the assignment of cells to sample clusters
#' @export
#'
#' @examples
load_data <- function(args){
print("Loading h5-file:")
file.h5 <- H5Fopen(args$sample)
#file.h5 <- H5File$new(args$sample, mode = "r+")
print(file.h5)
count_matrix <- file.h5$'/assays/protein_read_counts/layers/read_counts'
#loading_time <- system.time(count_matrix <- file.h5[["assays/protein_read_counts/layers/read_counts"]][,])
protein_list  <- file.h5$'/assays/protein_read_counts/ca/id'
#protein_list  <- file.h5[["assays/protein_read_counts/ca/id"]][]
barcode_list <- file.h5$'/assays/protein_read_counts/ra/barcode'
#barcode_list <- file.h5[["assays/protein_read_counts/ra/barcode"]][]
sample_name <- file.h5$'/assays/protein_read_counts/ra/sample_name'[1]
#sample_name <- file.h5[["assays/protein_read_counts/ra/sample_name"]][1]
h5closeAll()
if(args$nClusters > 1){
sample_assignment_file <- sprintf("%s/demultiplexing/%s.cells_variants.assignments.tsv",dirname(args$sample),sample_name)
sample_assignment <- read_delim(sample_assignment_file,  delim = "\t") %>%
as.list %>%
lapply(FUN =as.character) %>%
unlist()
sample_assignment <- sample_assignment[2:length(sample_assignment)]
print('Writing sample assignment to h5-file')
add_dataset_to_h5(args$sample, 'assays/protein_read_counts/ra/cluster_assignment', sample_assignment)
#file.h5$'/assays/protein_read_counts/ra/cluster_assignment' <- sample_assignment
print('Done')
}
else{
sample_assignment <- rep('1', ncol(count_matrix))
}
count_matrix <- as.data.frame(t(count_matrix), row.names = barcode_list)
colnames(count_matrix) <- protein_list
#file.h5$close_all()
return(list(data = count_matrix, cluster_assignment =sample_assignment))
}
#' Computes an estimate of the intra-cluster doublet rate
#'
#' @param cluster_assignment a character vector assigning each cell to a cluster
#' "1", "2", "1+2" and so forth
#' @param clusterID one of the cluster identities as character - must be of the form "1", "2" ,...
#'
#' @return The estiated doublet rate as a numeric value
#' @export
#'
#' @examples
approximate_doublet_rate <- function(clusterID,cluster_assignment){
fraction_of_cluster <- sum(cluster_assignment == clusterID)/sum(sapply(cluster_assignment, FUN = nchar)==1)
#solving the equation (1-fraction_of_cluster) * (doubletrate involving $clusterID) =
# (observed doubletrate involving $clusterID)
observed_doublet_involving_clusterID <-  sum(( ( cluster_assignment %>% sapply(FUN = nchar) ) > 1 ) &
grepl(clusterID, x = cluster_assignment, fixed = TRUE)) /
sum(grepl(clusterID, x = cluster_assignment, fixed = TRUE))
return((fraction_of_cluster/(1-fraction_of_cluster)) * observed_doublet_involving_clusterID)
}
#' @param samplename Full path to h5 file
#' @param doublets_data
#' @param count_matrix
#' @param filter_out
#' @param cluster_assignment
#'
#' @return
#' @export
#'
#' @examples
write_h5 <- function(samplename, doublets_data, count_matrix, filter_out, cluster_assignment){
#new_samplename <- paste0(args$sample,".filtered")
#file.h5 <- H5Fopen(samplename)
#file.h5 <- H5File$new(new_samplename, mode = "r+")
print("Writing doublet data to h5 file:")
#file.h5$'/metadata/doublet_rates' <- doublets_data
add_dataset_to_h5(samplename, 'metadata/doublet_rates', doublets_data)
#add_dataset_to_h5(file.h5, "metadata","doublet_rates", doublets_data)
print("Done")
try({h5createGroup(samplename,'assays/protein_read_counts_filtered')}, silent = TRUE)
#file.h5$create_group("assays/protein_read_counts_filtered")
try({h5createGroup(samplename,'assays/protein_read_counts_filtered/layers')},silent = TRUE)
#file.h5$create_group("assays/protein_read_counts_filtered/layers")
print("Writing filtered read counts to h5 file:")
print(count_matrix %>% filter(!filter_out) %>% as.matrix() %>% t())
#file.h5$'/assays/protein_read_counts_filtered/layers/read_counts_filtered' <-
#  count_matrix %>% filter(!filter_out) %>% as.matrix() %>% t()
add_dataset_to_h5(samplename, 'assays/protein_read_counts_filtered/layers/read_counts_filtered',
count_matrix %>% filter(!filter_out) %>% as.matrix() %>% t())
#h5delete(file = args$sample, name = "metadata/doublet_rates")
print("Done")
#add_dataset_to_h5(file.h5, "assays/protein_read_counts_filtered/layers","read_counts_filtered",
#                  count_matrix %>% filter(!filter_out) %>% as.matrix() %>% t())
print("Writing filter mask to h5 file:")
print(filter_out)
#file.h5$'/assays/protein_read_counts/ra/filter' <- filter_out
add_dataset_to_h5(samplename, 'assays/protein_read_counts/ra/filter', filter_out)
print("Done")
#add_dataset_to_h5(file.h5, "assays/protein_read_counts/ra","filter", filter_out)
h5createGroup(samplename,'assays/protein_read_counts_filtered/ra')
#file.h5$create_group("assays/protein_read_counts_filtered/ra")
print("Writing filtered barcodes to h5 file:")
print(rownames(count_matrix)[!filter_out])
#file.h5$'/assays/protein_read_counts_filtered/ra/barcode' <- rownames(count_matrix)[!filter_out]
add_dataset_to_h5(samplename, 'assays/protein_read_counts_filtered/ra/barcode', rownames(count_matrix)[!filter_out])
print("Done")
#add_dataset_to_h5(file.h5, "assays/protein_read_counts_filtered/ra","barcode", rownames(count_matrix)[!filter_out])
print("Writing cluster assignment to h5 file:")
print(cluster_assignment[!filter_out])
#file.h5$'/assays/protein_read_counts_filtered/ra/cluster_assignment' <- cluster_assignment[!filter_out]
add_dataset_to_h5(samplename, 'assays/protein_read_counts_filtered/ra/cluster_assignment', cluster_assignment[!filter_out])
print("Done")
#add_dataset_to_h5(file.h5, "assays/protein_read_counts_filtered/ra","cluster_assignment", cluster_assignment[!filter_out])
#file.h5$close_all()
#h5closeAll()
}
main <- function(args){
#system(sprintf("cp %s %s.filtered", args$sample,args$sample))## move this to the call on the snakemake rule
data_full <- load_data(args)
count_matrix <- data_full$data
cluster_assignment <- data_full$cluster_assignment
fractionOfIsotypeIgG2b <- count_matrix$Isotype_IgG2b / apply(count_matrix, MARGIN = 1, FUN = sum)
fractionOfIsotypeIgG2a <- count_matrix$Isotype_IgG2a / apply(count_matrix, MARGIN = 1, FUN = sum)
fractionOfIsotypeIgG1 <- count_matrix$Isotype_IgG1 / apply(count_matrix, MARGIN = 1, FUN = sum)
data.frame(isotype1 = fractionOfIsotypeIgG2b, isotype2 = fractionOfIsotypeIgG1, isotype3 =fractionOfIsotypeIgG2a) %>%
ggplot(aes(x = isotype1)) +
geom_histogram(bins = 100) +
geom_vline(xintercept = mean(fractionOfIsotypeIgG2b) + 4 * sd(fractionOfIsotypeIgG2b), linetype = "dashed", color = "darkturquoise", size=1.5) +
ggtitle("Histogram of fractions of reads attributed to isotype control") +
xlab("Isotype IgG2b") +
ylab("Cell count") +
annotate("text",
x = mean(fractionOfIsotypeIgG2b) + 4 * sd(fractionOfIsotypeIgG2b) + 0.05,
y=max(table(fractionOfIsotypeIgG2b)) / 2, label="Filtering cutoff value",
angle=90, size = 10, color = "darkturquoise") +
scale_x_continuous(limits = c(-0.01, 1)) +
theme(
axis.title.x = element_text(size = 24),
axis.title.y = element_text(size = 24),
title = element_text(size=26),
axis.text = element_text(size = 22)
)
ggsave(paste0(args$outputdir,'/protein/results/filtering/IsotypeIgG2b.png'))
data.frame(isotype1 = fractionOfIsotypeIgG2b, isotype2 = fractionOfIsotypeIgG1, isotype3 =fractionOfIsotypeIgG2a) %>%
ggplot(aes(x = isotype2)) +
geom_histogram(bins = 100) +
geom_vline(xintercept = mean(fractionOfIsotypeIgG1) + 4 * sd(fractionOfIsotypeIgG1), linetype = "dashed", color = "darkturquoise", size=1.5) +
ggtitle("Histogram of fractions of reads attributed to isotype control") +
xlab("Isotype IgG1") +
ylab("Cell count") +
annotate("text", x = mean(fractionOfIsotypeIgG2b) + 4 * sd(fractionOfIsotypeIgG2b) + 0.05,
y=max(table(fractionOfIsotypeIgG2b)) / 2, label="Filtering cutoff value",
angle=90, size = 10, color = "darkturquoise") +
scale_x_continuous(limits = c(-0.01, 1)) +
theme(
axis.title.x = element_text(size = 24),
axis.title.y = element_text(size = 24),
title = element_text(size=26),
axis.text = element_text(size = 22),
)
ggsave(paste0(args$outputdir,'/protein/results/filtering/IsotypeIgG1.png'))
data.frame(isotype1 = fractionOfIsotypeIgG2b, isotype2 = fractionOfIsotypeIgG1, isotype3 =fractionOfIsotypeIgG2a) %>%
ggplot(aes(x = isotype3)) +
geom_histogram(bins = 100) +
geom_vline(xintercept = mean(fractionOfIsotypeIgG2a) + 4 * sd(fractionOfIsotypeIgG2a), linetype = "dashed", color = "darkturquoise", size=1.5) +
ggtitle("Histogram of fractions of reads attributed to isotype control") +
xlab("Isotype IgG2a") +
ylab("Cell count") +
annotate("text", x = mean(fractionOfIsotypeIgG2b) + 4 * sd(fractionOfIsotypeIgG2b) + 0.05,
y=max(table(fractionOfIsotypeIgG2b)) / 2, label="Filtering cutoff value",
angle=90, size = 10, color = "darkturquoise") +
scale_x_continuous(limits = c(-0.01, 1)) +
theme(
axis.title.x = element_text(size = 24),
axis.title.y = element_text(size = 24),
title = element_text(size=26),
axis.text = element_text(size = 22)
)
ggsave(paste0(args$outputdir,'/protein/results/filtering/IsotypeIgG2a.png'))
data.frame(isotype1 = fractionOfIsotypeIgG2b, isotype2 = fractionOfIsotypeIgG1, isotype3 =fractionOfIsotypeIgG2a) %>%
ggplot(aes(x = log(isotype3), y = log(isotype2))) +
geom_point()
data.frame(isotype1 = fractionOfIsotypeIgG2b, isotype2 = fractionOfIsotypeIgG1, isotype3 =fractionOfIsotypeIgG2a) %>%
ggplot(aes(x = log(isotype1), y = log(isotype2))) +
geom_point()
#filter cells with extreme isotype expression (in the future this may be changed to extreme values relative to entire expression)
filter_out <- fractionOfIsotypeIgG1 >  mean(fractionOfIsotypeIgG1) + 4 * sd(fractionOfIsotypeIgG1)
filter_out <- filter_out | ( fractionOfIsotypeIgG2b > (mean(fractionOfIsotypeIgG2b) + 4 * sd(fractionOfIsotypeIgG2b)) )
filter_out <- filter_out | ( fractionOfIsotypeIgG2a > (mean(fractionOfIsotypeIgG2a) + 4 * sd(fractionOfIsotypeIgG2a)) )
#filter doublets
filter_out <- filter_out | ( ( cluster_assignment %>% sapply(FUN = nchar) ) > 1 )
clusterIDs <- unique(cluster_assignment[nchar(cluster_assignment) == 1])
doublets_data <- data.frame(clusterIDs = clusterIDs,
doubletRates = sapply(clusterIDs, FUN = approximate_doublet_rate, cluster_assignment),
row.names = 1:args$nClusters)
#print("Writing to file:")
write_h5(args$sample, doublets_data, count_matrix, filter_out, cluster_assignment)
}
main(args)
(
main(args)
main(args)
library(argparse, quietly = TRUE)
#library(hdf5r, quietly = TRUE)
library(rhdf5, quietly = TRUE)
library(tidyverse, quietly = TRUE)
