labs(x = "Cluster size", y = "Proportion oligoclonal Clusters")+
theme_classic() +
geom_line(theoretical_result, mapping = aes(x = cluster_size, y = oligoclonality))
centi_df %>%
filter(grepl("_904_", centi_df$basename)) %>%
group_by(cluster_category_no_WBCs) %>%
#  filter(n() > 1) %>%
summarize(prop = mean(more_than_one == "Yes" & !is.na(more_than_one))) %>%
ungroup() %>%
mutate(cluster_category_no_WBCs = as.numeric(cluster_category_no_WBCs)) %>%
ggplot(aes(x = cluster_category_no_WBCs, y = prop)) +
geom_point() +
labs(x = "Cluster size", y = "Proportion oligoclonal Clusters")+
theme_classic() +
geom_line(theoretical_result, mapping = aes(x = cluster_size, y = oligoclonality))
centi_df %>%
filter(grepl("_904_", centi_df$basename)) %>%
group_by(cluster_category_no_WBCs) %>%
filter(n() > 1) %>%
summarize(prop = mean(more_than_one == "Yes" & !is.na(more_than_one))) %>%
ungroup() %>%
mutate(cluster_category_no_WBCs = as.numeric(cluster_category_no_WBCs)) %>%
ggplot(aes(x = cluster_category_no_WBCs, y = prop)) +
geom_point() +
labs(x = "Cluster size", y = "Proportion oligoclonal Clusters")+
theme_classic() +
geom_line(theoretical_result, mapping = aes(x = cluster_size, y = oligoclonality))
centi_df %>%
filter(grepl("_904_", centi_df$basename)) %>%
group_by(cluster_category_no_WBCs) %>%
filter(n() > 1) %>%
summarize(prop = mean(more_than_one == "Yes" & !is.na(more_than_one))) %>%
ungroup() %>%
mutate(cluster_category_no_WBCs = as.numeric(cluster_category_no_WBCs)) %>%
ggplot(aes(x = cluster_category_no_WBCs, y = prop)) +
geom_point() +
labs(x = "Cluster size", y = "Proportion oligoclonal Clusters")+
theme_classic() +
geom_line(theoretical_result[2:6,], mapping = aes(x = cluster_size, y = oligoclonality))
centi_df %>%
filter(grepl("_904_", centi_df$basename)) %>%
group_by(cluster_category_no_WBCs) %>%
filter(n() > 1) %>%
summarize(prop = mean(more_than_one == "Yes" & !is.na(more_than_one))) %>%
ungroup() %>%
mutate(cluster_category_no_WBCs = as.numeric(cluster_category_no_WBCs)) %>%
ggplot(aes(x = cluster_category_no_WBCs, y = prop)) +
geom_point() +
labs(x = "Cluster size", y = "Proportion oligoclonal Clusters")+
theme_classic() +
geom_line(theoretical_result[1:6,], mapping = aes(x = cluster_size, y = oligoclonality))
centi_df %>%
filter(grepl("_904_", centi_df$basename)) %>%
group_by(cluster_category_no_WBCs) %>%
filter(n() > 1) %>%
summarize(prop = mean(more_than_one == "Yes" & !is.na(more_than_one))) %>%
ungroup() %>%
mutate(cluster_category_no_WBCs = as.numeric(cluster_category_no_WBCs)) %>%
ggplot(aes(x = cluster_category_no_WBCs, y = prop)) +
geom_point() +
labs(x = "Cluster size", y = "Proportion oligoclonal Clusters")+
theme_classic() +
geom_line(theoretical_result[1:5,], mapping = aes(x = cluster_size, y = oligoclonality))
###### Do the same with the next tumor
primary_905A <- read_delim("../../validation_experiment/Primary_tumor_csv_files/20220812.B-905A_R2_stats.csv",
col_names = F, delim = "\t")
save(summary_df, file="../../validation_experiment/output/summary_df_nine_ninefive.rds")
gc()
ggsave("../../validation_experiment/output/observed_oligoclonality_vs_predicted_904.png", plot = last_plot(), dpi = 300)
gc()
rm(df_list)
gc()
###### Do the same with the next tumor
primary_905A <- read_delim("../../validation_experiment/Primary_tumor_csv_files/20220812.B-905A_R2_stats.csv",
col_names = F, delim = "\t")
primary_905B <- read_delim("../../validation_experiment/Primary_tumor_csv_files/20220812.B-905B_R2_stats.csv",
col_names = F, delim = "\t" )
colnames(primary_905A)[1] <- "barcodes"
colnames(primary_905A)[3] <- "counts"
colnames(primary_905B)[1] <- "barcodes"
colnames(primary_905B)[3] <- "counts"
primary_905A_counts <-  primary_905A %>%
filter(counts !=0)
primary_905B_counts <-  primary_905B %>%
filter(counts !=0)
length(intersect(primary_905A_counts$barcodes,primary_905B_counts$barcodes))
primary_905_counts <- rbind(primary_905A_counts,primary_905B_counts)
primary_905_counts <- primary_905_counts %>%
filter(barcodes %in% intersect(primary_905A_counts$barcodes,primary_905B_counts$barcodes))
primary_905_counts <- primary_905_counts %>%
group_by(barcodes) %>%
summarize(total_count = sum(counts))
summary(primary_905_counts)
primary_905_counts<- primary_905_counts %>%
mutate(relative_count = total_count/sum(total_count))
summary(primary_905_counts)
theoretical_result_905 <- data.frame(cluster_size = 2:9,
monoclonality = probability_of_monoclonality,
oligoclonality = 1-probability_of_monoclonality)
centi_df %>%
filter(grepl("_904_", centi_df$basename)) %>%
group_by(cluster_category_no_WBCs) %>%
filter(n() > 1) %>%
summarize(prop = mean(more_than_one == "Yes" & !is.na(more_than_one))) %>%
ungroup() %>%
mutate(cluster_category_no_WBCs = as.numeric(cluster_category_no_WBCs)) %>%
ggplot(aes(x = cluster_category_no_WBCs, y = prop)) +
geom_point() +
labs(x = "Cluster size", y = "Proportion oligoclonal Clusters")+
theme_classic() +
geom_line(theoretical_result_905, mapping = aes(x = cluster_size, y = oligoclonality))
centi_df %>%
filter(grepl("_905_", centi_df$basename)) %>%
group_by(cluster_category_no_WBCs) %>%
filter(n() > 1) %>%
summarize(prop = mean(more_than_one == "Yes" & !is.na(more_than_one))) %>%
ungroup() %>%
mutate(cluster_category_no_WBCs = as.numeric(cluster_category_no_WBCs)) %>%
ggplot(aes(x = cluster_category_no_WBCs, y = prop)) +
geom_point() +
labs(x = "Cluster size", y = "Proportion oligoclonal Clusters")+
theme_classic() +
geom_line(theoretical_result_905, mapping = aes(x = cluster_size, y = oligoclonality))
centi_df %>%
filter(grepl("_905_", centi_df$basename)) %>% nrow()
summary_df
grepl("_905_",summary_df$basename)
sum(grepl("_905_",summary_df$basename))
centi_df %>%
filter(grepl("_905_", centi_df$basename)) %>%
group_by(cluster_category_no_WBCs) %>%
#  filter(n() > 1) %>%
summarize(prop = mean(more_than_one == "Yes" & !is.na(more_than_one))) %>%
ungroup() %>%
mutate(cluster_category_no_WBCs = as.numeric(cluster_category_no_WBCs)) %>%
ggplot(aes(x = cluster_category_no_WBCs, y = prop)) +
geom_point() +
labs(x = "Cluster size", y = "Proportion oligoclonal Clusters")+
theme_classic() +
geom_line(theoretical_result_905, mapping = aes(x = cluster_size, y = oligoclonality))
grepl("_905_", centi_df$basename)
sum(grepl("_905_", centi_df$basename))
library(readr)
post_sampling <- read_delim("../../input_folder/Br7/Br7_1M_1_seed13443_postSampling.tsv",
delim = "\t", col_names = FALSE)
colnames(post_sampling) <- c("Score", "Unknown1","Unknown2", "Unknown3", "Tree")
head(post_sampling)
sum(post_sampling$Score)
sum(post_sampling$Unknown1)
post_sampling <- read_delim("../../input_folder/Br7_1M_10_seed15092_postSampling.tsv",
delim = "\t", col_names = FALSE)
post_sampling <- read_delim("../../input_folder/Br7_1M_10_seed15092_postSampling.tsv",
delim = "\t", col_names = FALSE)
post_sampling <- read_delim("../../input_folder/Br7/Br7_1M_10_seed15092_postSampling.tsv",
delim = "\t", col_names = FALSE)
colnames(post_sampling) <- c("Score", "Unknown1","Unknown2", "Unknown3", "Tree")
head(post_sampling)
sum(post_sampling$Unknown1)
post_sampling <- read_delim("../../input_folder/Br7/ Br7_1M_2_seed13543_postSampling.tsv",
delim = "\t", col_names = FALSE)
post_sampling <- read_delim("../../input_folder/Br7/Br7_1M_2_seed13543_postSampling.tsv",
delim = "\t", col_names = FALSE)
colnames(post_sampling) <- c("Score", "Unknown1","Unknown2", "Unknown3", "Tree")
head(post_sampling)
sum(post_sampling$Unknown1)
sum(duplicated(post_sampling$Tree))
sum(exp(post_sampling$Score))
normaliser <- sum(exp(post_sampling$Score))
exp(post_sampling$Score)/normaliser
max(exp(post_sampling$Score)/normaliser)
install.packages("Rcpp")
library(Rcpp)
sourceCpp('mutations_placement.cpp')
sourceCpp('mutations_placement.cpp')
sourceCpp('mutations_placement.cpp')
sourceCpp('mutations_placement.cpp')
sourceCpp('mutations_placement.cpp')
sourceCpp('mutations_placement.cpp')
sourceCpp('mutations_placement.cpp')
sourceCpp('mutations_placement.cpp')
sourceCpp('mutations_placement.cpp')
sourceCpp('mutations_placement.cpp')
sourceCpp('mutations_placement.cpp')
sourceCpp('mutations_placement.cpp')
sourceCpp('mutations_placement.cpp')
sourceCpp('mutations_placement.cpp')
sourceCpp('mutations_placement.cpp')
sourceCpp('mutations_placement.cpp')
sourceCpp('mutations_placement.cpp')
sourceCpp('mutations_placement.cpp')
sourceCpp('mutations_placement.cpp')
sourceCpp('mutations_placement.cpp')
sourceCpp('mutations_placement.cpp')
sourceCpp('mutations_placement.cpp')
sourceCpp('mutations_placement.cpp')
sourceCpp('mutations_placement.cpp')
sourceCpp('mutations_placement.cpp')
sourceCpp('mutations_placement.cpp')
sourceCpp('mutations_placement.cpp')
sourceCpp('mutations_placement.cpp')
sourceCpp('mutations_placement.cpp')
sourceCpp('mutations_placement.cpp')
sourceCpp('mutations_placement.cpp')
View(post_sampling)
Count_file <- "../../input_folder/Br7/Br7.txt"
Description_file <- "../../input_folder/Br7/Br7_samples_nodeDescription.tsv"
counts <- read_delim(Count_file,
delim = "\t", col_names = FALSE)
postSampling <- read_delim(posterior_sampling_file,
delim = "\t", col_names = FALSE)
posterior_sampling_file <-  "../../input_folder/Br7/Br7_1M_2_seed13543_postSampling.tsv"
postSampling <- read_delim(posterior_sampling_file,
delim = "\t", col_names = FALSE)
colnames(postSampling) <- c("Score", "Unknown1","Unknown2", "Unknown3", "Tree")
posteriorSampling_File <-  "../../input_folder/Br7/Br7_1M_2_seed13543_postSampling.tsv"
countFile <- "../../input_folder/Br7/Br7.txt"
descriptionFile <- "../../input_folder/Br7/Br7_samples_nodeDescription.tsv"
postSampling <- read_delim(posteriorSamplingFile,
delim = "\t", col_names = FALSE)
colnames(postSampling) <- c("Score", "Unknown1","Unknown2", "Unknown3", "Tree")
posteriorSamplingFile <-  "../../input_folder/Br7/Br7_1M_2_seed13543_postSampling.tsv"
postSampling <- read_delim(posteriorSamplingFile,
delim = "\t", col_names = FALSE)
colnames(postSampling) <- c("Score", "Unknown1","Unknown2", "Unknown3", "Tree")
counts <- read_delim(countFile,
delim = "\t", col_names = FALSE)
description <- read_delim(descriptionFile,
delim = "\t", col_names = FALSE)
View(counts)
View(description)
description <- read_delim(descriptionFile,
delim = "\t", col_names = c("Cluster", "Cell-Count", "TCs", "WBCs"))
description <- read_delim(descriptionFile,
delim = "\t", col_names = c("Cluster", "Cell-Count", "TCs", "WBCs", "Description"))
nCells <- sum(description$CellCount)
description <- read_delim(descriptionFile,
delim = "\t", col_names = c("Cluster", "CellCount", "TCs", "WBCs", "Description"))
nCells <- sum(description$CellCount)
nCells
nCLusters <- nrow description
nCLusters <- nrow(description)
nclusters
nClusters
nClusters <- nrow(description)
nClusters
View(counts)
View(description)
?rep
ClusterID <- vector()
for(i in 1:nClusters) ClusterID <- c(ClusterID, rep.int(i,description$CellCounts))
for(i in 1:nClusters) ClusterID <- c(ClusterID, rep.int(i,description$CellCount))
ClusterID <- vector()
for(i in 1:nClusters) ClusterID <- c(ClusterID, rep.int(i,description$CellCount[i]))
length(CLusterID)
length(ClusterID)
nClusters
nCells
mutatedReadCounts <- matrix(0,nrow = nMutations, ncol = nClusters)
nMutations <- nrow(counts)
mutatedReadCounts <- matrix(0,nrow = nMutations, ncol = nClusters)
mutatedReadCounts
dim(mutatedReadCounts)
mutatedReadCounts <- matrix(0,nrow = nMutations, ncol = nClusters)
for (j in 1:nClusters){
mutatedReadCounts[,j] = counts[,4+2*j]
}
nrow(counts)
nMutations
mutatedReadCounts <- matrix(0,nrow = nMutations, ncol = 0)
mutatedReadCounts
for (j in 1:nClusters){
mutatedReadCounts <- cbind(mutatedReadCounts,counts[,4+2*j])
}
mutatedReadCounts
dim(mutatedReadCounts)
nClusters
wildtypeReadCounts <- matrix(0,nrow = nMutations, ncol = 0)
for (j in 1:nClusters){
mutatedReadCounts <- cbind(mutatedReadCounts,counts[,4+2*j-1])
}
wildtypeReadCounts
wildtypeReadCounts <- matrix(0,nrow = nMutations, ncol = 0)
for (j in 1:nClusters){
mutatedReadCounts <- cbind(mutatedReadCounts,counts[,4+2*j-1])
}
wildtypeReadCounts
mutatedReadCounts
wildtypeReadCounts
mutatedReadCounts <- matrix(0,nrow = nMutations, ncol = 0)
for (j in 1:nClusters){
mutatedReadCounts <- cbind(mutatedReadCounts,counts[,4+2*j])
}
for (j in 1:nClusters){
wildtypeReadCounts <- cbind(mutatedReadCounts,counts[,4+2*j-1])
}
wildtypeReadCounts
wildtypeReadCounts <- matrix(0,nrow = nMutations, ncol = 0)
for (j in 1:nClusters){
wildtypeReadCounts <- cbind(mutatedReadCounts,counts[,4+2*j-1])
}
wildtypeReadCounts
View
View(wildtypeReadCounts)
View(mutatedReadCounts)
wildtypeReadCounts <- matrix(0,nrow = nMutations, ncol = 0)
wildtypeReadCounts <- matrix(0,nrow = nMutations, ncol = 0)
for (j in 1:nClusters){
wildtypeReadCounts <- cbind(mutatedReadCounts,counts[,4+2*j-1])
}
View(wildtypeReadCounts)
mutatedReadCounts <- matrix(0,nrow = nMutations, ncol = 0)
mutatedReadCounts <- matrix(0,nrow = nMutations, ncol = 0)
for (j in 1:nClusters){
mutatedReadCounts <- cbind(mutatedReadCounts,counts[,4+2*j])
}
View(mutatedReadCounts)
ncol(mutatedReadCounts)
ncol(wildtypeReadCounts)
##Pull apart the count file into counts for mutated read and total counts respectively
mutatedReadCounts <- matrix(0,nrow = nMutations, ncol = 0)
##Pull apart the count file into counts for mutated read and total counts respectively
mutatedReadCounts <- matrix(0,nrow = nMutations, ncol = 0)
for (j in 1:nClusters){
print(j)
mutatedReadCounts <- cbind(mutatedReadCounts,counts[,4+2*j])
}
wildtypeReadCounts <- matrix(0,nrow = nMutations, ncol = 0)
wildtypeReadCounts <- matrix(0,nrow = nMutations, ncol = 0)
for (j in 1:nClusters){
print(j)
wildtypeReadCounts <- cbind(mutatedReadCounts,counts[,4+2*j-1])
}
##Pull apart the count file into counts for mutated read and total counts respectively
mutatedReadCounts <- matrix(0,nrow = nMutations, ncol = 0)
##Pull apart the count file into counts for mutated read and total counts respectively
mutatedReadCounts <- matrix(0,nrow = nMutations, ncol = 0)
for (j in 1:nClusters){
print(j)
mutatedReadCounts <- cbind(mutatedReadCounts,counts[,4+2*j])
}
wildtypeReadCounts <- matrix(0,nrow = nMutations, ncol = 0)
wildtypeReadCounts <- matrix(0,nrow = nMutations, ncol = 0)
for (j in 1:nClusters){
print(j)
wildtypeReadCounts <- cbind(wildtypeReadCounts,counts[,4+2*j-1])
}
totalReadCounts <- mutatedReadCounts + wildtypeReadCounts
colnames(postSampling) <- c("LogScore", "SequencingErrorRate","DropoutRate", "LogTau", "Tree")
postSampling <- read_delim(posteriorSamplingFile,
delim = "\t", col_names = c("LogScore", "SequencingErrorRate","DropoutRate", "LogTau", "Tree"))
##wbc status indicates which of the cells is a white blood cells and which one isn't.
##So far, the cells are arbitrary, and I will assign the fist cells from a cluster to be WBCs.
wbcStatus <- rep(0, nCells)
wbcStatus
##wbc status indicates which of the cells is a white blood cells and which one isn't.
##So far, the cells are arbitrary, and I will assign the fist cells from a cluster to be WBCs.
wbcStatus <- rep(0, nCells)
for(i in 1:nClusters){
for(j in 1:description$WBCs[i]){ #Iterating over the number of White blood cells of a cluster
wbcStatus[which(ClusterID == i)[1] + j-1] # and identifying the first cell
# that belongs to a cluster and counting from then on
}
}
wbcStatus
for(i in 1:nClusters){
for(j in 1:description$WBCs[i]){ #Iterating over the number of White blood cells of a cluster
wbcStatus[which(ClusterID == i)[1] + j-1] <- 1 # and identifying the first cell
# that belongs to a cluster and counting from then on
}
}
wbcStatus
for(j in 1:0){
print(j)
}
for(i in 1:nClusters){
j <- 1
while(j>0 & j<description$WBCs[i]+1){ #Iterating over the number of White blood cells of a cluster
wbcStatus[which(ClusterID == i)[1] + j-1] <- 1 # and identifying the first cell
# that belongs to a cluster and counting from then on
j<- j+1
}
}
##wbc status indicates which of the cells is a white blood cells and which one isn't.
##So far, the cells are arbitrary, and I will assign the fist cells from a cluster to be WBCs.
wbcStatus <- rep(0, nCells)
for(i in 1:nClusters){
j <- 1
while(j>0 & j<description$WBCs[i]+1){ #Iterating over the number of White blood cells of a cluster
wbcStatus[which(ClusterID == i)[1] + j-1] <- 1 # and identifying the first cell
# that belongs to a cluster and counting from then on
j<- j+1
}
}
wbsStatus
wbcStatus
find_most_recent_common_ancestor <- function(leaf1, leaf2,
tree_parent_vector_format,
nCells, nMutations, nSamples,
ancestorMatrix, alleleCount,
leafClusterId,mutatedReadCounts,
totalReadCounts,
dropoutRate, seqErr, 1,
find_most_recent_common_ancestor <- function(leaf1, leaf2,
tree_parent_vector_format,
nCells, nMutations, nSamples,
ancestorMatrix, alleleCount,
leafClusterId,mutatedReadCounts,
totalReadCounts,
dropoutRate, seqErr,
wbcStatus
){
##Trace back the lineage of the tree for one leaf.
##Then trace back the lineage of the tree for the other leaf and for every node
##whether is lies in the lineage of the first leaf.
##The first node that does is the most recent common ancestor node.
##Concatenating these two will form the shortest path through the tree.
## If there is a mutation on the tree, then this means that the cells are
##split by the tree, if there is none, then they aren't.
##Note that the nodes of the tree are encoded from 0 to the number of nodes -1
lineage1 <- vector()
while(lineage1[length(lineage1)]!= length(tree_parent_vector_format))
lineage1 <- c(lineage1, tree_parent_vector_format[lineage1[length(lineage1)]]
}
find_most_recent_common_ancestor <- function(leaf1, leaf2,
tree_parent_vector_format,
nCells, nMutations, nSamples,
ancestorMatrix, alleleCount,
leafClusterId,mutatedReadCounts,
totalReadCounts,
dropoutRate, seqErr,
wbcStatus
){
##Trace back the lineage of the tree for one leaf.
##Then trace back the lineage of the tree for the other leaf and for every node
##whether is lies in the lineage of the first leaf.
##The first node that does is the most recent common ancestor node.
##Concatenating these two will form the shortest path through the tree.
## If there is a mutation on the tree, then this means that the cells are
##split by the tree, if there is none, then they aren't.
##Note that the nodes of the tree are encoded from 0 to the number of nodes -1
lineage1 <- vector()
while(lineage1[length(lineage1)]!= length(tree_parent_vector_format))
lineage1 <- c(lineage1, tree_parent_vector_format[lineage1[length(lineage1)]])
}
ancestor_matrix <- parentVector2ancMatrix(tree,
length(tree))
#for (i in nrow(postSampling)){
#  tree <- postSampling$Tree[i]
tree <- postSampling$Tree[1]
tree
length(tree)
?strsplit
tree_parent_vector_format <- unlist(strsplit(tree, " "))
treeParentVectorFormat <- unlist(strsplit(tree, " "))
treeParentVectorFormat
str(treeParentVectorFormat)
treeParentVectorFormat <- as.numeric(unlist(strsplit(tree, " ")))
str(treeParentVectorFormat)
ancestor_matrix <- parentVector2ancMatrix(treeParentVectorFormat,
length(treeParentVectorFormat))
acestorMatrix
acestorMatrix
ancestorMatrix
ancestorMatrix <- parentVector2ancMatrix(treeParentVectorFormat,
length(treeParentVectorFormat))
ancestorMatrix
treeParentVectorFormat <- as.numeric(unlist(strsplit(tree, " ")))
ancestorMatrix <- parentVector2ancMatrix(treeParentVectorFormat,
length(treeParentVectorFormat))
ancestorMatrix
find_most_recent_common_ancestor <- function(leaf1, leaf2,
tree_parent_vector_format,
nCells, nMutations, nSamples,
ancestorMatrix, alleleCount,
leafClusterId,mutatedReadCounts,
totalReadCounts,
dropoutRate, seqErr,
wbcStatus
){
##Trace back the lineage of the tree for one leaf.
##Then trace back the lineage of the tree for the other leaf and for every node
##whether is lies in the lineage of the first leaf.
##The first node that does is the most recent common ancestor node.
##Concatenating these two will form the shortest path through the tree.
## If there is a mutation on the tree, then this means that the cells are
##split by the tree, if there is none, then they aren't.
##Note that the nodes of the tree are encoded from 0 to the number of nodes -1
lineage1 <- vector()
while(lineage1[length(lineage1)]!= length(tree_parent_vector_format))
lineage1 <- c(lineage1, tree_parent_vector_format[lineage1[length(lineage1)]])
}
find_most_recent_common_ancestor <- function(leaf1, leaf2,
tree_parent_vector_format,
nCells, nMutations, nSamples,
ancestorMatrix, alleleCount,
leafClusterId,mutatedReadCounts,
totalReadCounts,
dropoutRate, seqErr,
wbcStatus
){
##Trace back the lineage of the tree for one leaf.
##Then trace back the lineage of the tree for the other leaf and for every node
##whether is lies in the lineage of the first leaf.
##The first node that does is the most recent common ancestor node.
##Concatenating these two will form the shortest path through the tree.
## If there is a mutation on the tree, then this means that the cells are
##split by the tree, if there is none, then they aren't.
##Note that the nodes of the tree are encoded from 0 to the number of nodes -1
lineage1 <- vector()
while(lineage1[length(lineage1)]!= length(tree_parent_vector_format))
lineage1 <- c(lineage1, tree_parent_vector_format[lineage1[length(lineage1)]])
}
