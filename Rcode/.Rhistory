substr(basename, 1, 4)
i <- 1
df <- df_list[[i]]
cumprop_col <- df[, "cumprop_col"]
num_rows_accumulating_nine <- sum(cumprop_col <= 0.90)
num_rows_accumulating_ninefive <- sum(cumprop_col <= 0.95)
basename <- names(df_list)[i]
basename
names(df_list)
names(df_list)[i]
df_list
reverse_paste <- function(filename, string){
paste0(string,filename)
}
load_cluster_df <- function(filename){
df <- read_delim(filename, delim = "\t",col_names = FALSE)
colnames(df)[1] <- "barcodes"
colnames(df)[3] <- "counts"
df <- df %>% arrange(desc(counts)) %>%
mutate(prop_col = counts/sum(counts), cumprop_col = cumsum(prop_col))
return(df)
}
files <- list.files(path = "../../validation_experiment/Cluster_csv_files/", pattern = "\\.csv$")
files <- map_chr(files, reverse_paste, "../../validation_experiment/Cluster_csv_files/")
myfiles <- map(files, load_cluster_df)
names(df_list)
names(myfiles)
files
files <- map_chr(files, reverse_paste, "../../validation_experiment/Cluster_csv_files/")
files
files <- list.files(path = "../../validation_experiment/Cluster_csv_files/", pattern = "\\.csv$")
files
names(df_list)
names(mfiles)<- files
names(myfiles)<- files
df_list <- myfiles
# create empty data frame to store summary information
summary_df <- data.frame(basename = character(),
num_rows_accumulating_nine = integer(),
num_rows_accumulating_ninefive = integer(),
stringsAsFactors = FALSE)
for (i in seq_along(df_list)) {
df <- df_list[[i]]
cumprop_col <- df[, "cumprop_col"]
num_rows_accumulating_nine <- sum(cumprop_col <= 0.90)
num_rows_accumulating_ninefive <- sum(cumprop_col <= 0.95)
basename <- names(df_list)[i]
# determine the value based on the basename
value <- switch(substr(basename, 1, 4),
"10k_" = 10000,
"50k_" = 50000,
"100_" = 100,
"1000" = 1000,
NA) # if no match, assign NA
# determine if num_rows_accumulating > 1
more_than_one <- ifelse(num_rows_accumulating_ninefive > 0, "Yes", "No")
prop_col_1 <- df$prop_col[1]
prop_col_2 <- df$prop_col[2]
summary_row <- data.frame(basename = basename,
num_rows_accumulating_nine = num_rows_accumulating_nine,
num_rows_accumulating_ninefive = num_rows_accumulating_ninefive,
prop_col_1 = prop_col_1,
prop_col_2 = prop_col_2,
value = value,
more_than_one = more_than_one,
stringsAsFactors = FALSE)
summary_df <- rbind(summary_df, summary_row)
}
# Group the rows by the "value" column only
summary_df_filter %>%
group_by(value) %>%
summarize(prop = mean(more_than_one == "Yes" & !is.na(more_than_one))) %>%
ungroup() %>%
ggplot(aes(x = as.factor(value), y = prop)) +
geom_bar(stat = "identity", fill = colors[1:4], width = 0.8, position = position_dodge(width=0.6)) +
labs(x = "Primary Tumor complexity", y = "Proportion of oligoclonal Clusters")+
theme_classic()#+
summary_df$value[summary_df$basename %like% "^1000"] <- 1000
summary_df$value[is.na(summary_df$value)] <- 10000
summary_df$cluster_size <-    ifelse(grepl("_0_", summary_df$basename), "0",
ifelse(grepl("_1_", summary_df$basename), "1",
ifelse(grepl("_2_", summary_df$basename), "2",
ifelse(grepl("_3_", summary_df$basename), "3",
ifelse(grepl("_4_", summary_df$basename), "4",
ifelse(grepl("_5_", summary_df$basename), "5",
ifelse(grepl("_6_", summary_df$basename), "6",
ifelse(grepl("_7_", summary_df$basename), "7",
ifelse(grepl("_8_", summary_df$basename), "8",
ifelse(grepl("_9_", summary_df$basename), "9",
ifelse(grepl("_10_", summary_df$basename), "10",
ifelse(grepl("_10plus_", summary_df$basename), "11",
ifelse(grepl("_11_", summary_df$basename), "11",
ifelse(grepl("_12_", summary_df$basename), "12",
ifelse(grepl("_13_", summary_df$basename), "13",
ifelse(grepl("_14_", summary_df$basename), "14",
ifelse(grepl("_20_", summary_df$basename), "20",
ifelse(grepl("_25_", summary_df$basename), "25",
NA))))))))))))))))))
summary_df$cluster_category_no_WBCs <- "None"
for (i in c(0:15,25)){
pattern <- paste0("_",paste0(as.character(i),"_"))
summary_df$cluster_category_no_WBCs[grepl(pattern, summary_df$basename)] <- as.character(i)
}
duplicated_rows <- duplicated(substr(summary_df$basename, 1, 15))
summary_df_filter <- summary_df[!duplicated_rows, ]
summary_df_filter$cluster_size <- as.numeric(summary_df_filter$cluster_size)
summary_df_filter <- summary_df_filter[summary_df_filter$num_rows_accumulating_nine <= summary_df_filter$cluster_size, ]
colors <- c("#8491B499", "#3C548899", "#8491B4FF", "#3C5488FF", "#B09C8599")
prop_comp <- summary_df_filter %>%
group_by(value) %>%
summarize(num_more_than_one = sum(more_than_one == "Yes"), num_total = sum(more_than_one == "No"))
y <- prop_comp$num_more_than_one
z <- prop_comp$num_more_than_one + prop_comp$num_total
# Group the rows by the "value" column only
summary_df_filter %>%
group_by(value) %>%
summarize(prop = mean(more_than_one == "Yes" & !is.na(more_than_one))) %>%
ungroup() %>%
ggplot(aes(x = as.factor(value), y = prop)) +
geom_bar(stat = "identity", fill = colors[1:4], width = 0.8, position = position_dodge(width=0.6)) +
labs(x = "Primary Tumor complexity", y = "Proportion of oligoclonal Clusters")+
theme_classic()#+
centi_df <- summary_df_filter[summary_df_filter$value==100, ]
centi_df %>%
group_by(cluster_category_no_WBCs) %>%
summarize(prop = mean(more_than_one == "Yes" & !is.na(more_than_one))) %>%
ungroup() %>%
mutate(cluster_category_no_WBCs = as.numeric(cluster_category_no_WBCs)) %>%
ggplot(aes(x = cluster_category_no_WBCs, y = prop)) +
geom_line() +
labs(x = "Cluster size", y = "Proportion oligoclonal Clusters")+
theme_classic()
centi_df$cluster_category_no_WBCs <- factor(centi_df$cluster_category_no_WBCs, levels = c("1","2","3","4","5","6","7","8","9","10","11","12","13","14","15"))
centi_df %>%
group_by(cluster_category_no_WBCs) %>%
summarize(prop = mean(more_than_one == "Yes" & !is.na(more_than_one))) %>%
ungroup() %>%
filter(cluster_category_no_WBCs %in% c("1","2","3","4","5","6","7","8")) %>%
ggplot(aes(x = cluster_category_no_WBCs, y = prop, fill = cluster_category_no_WBCs)) +
geom_bar(stat = "identity") +
labs(x = "Cluster size", y = "Proportion oligoclonal Clusters")+
theme_classic()
primary_904A <- read_delim("../../validation_experiment/Primary_tumor_csv_files/20220812.B-904A_R2_stats.csv",
col_names = F, delim = "\t")
primary_904B <- read_delim("../../validation_experiment/Primary_tumor_csv_files/20220812.B-904B_R2_stats.csv",
col_names = F, delim = "\t" )
colnames(primary_904A)[1] <- "barcodes"
colnames(primary_904A)[3] <- "counts"
colnames(primary_904B)[1] <- "barcodes"
colnames(primary_904B)[3] <- "counts"
primary_904A_counts <-  primary_904A %>%
filter(counts !=0)
primary_904B_counts <-  primary_904B %>%
filter(counts !=0)
length(intersect(primary_904A_counts$barcodes,primary_904B_counts$barcodes))
primary_904_counts <- rbind(primary_904A_counts,primary_904B_counts)
primary_904_counts <- primary_904_counts %>%
filter(barcodes %in% intersect(primary_904A_counts$barcodes,primary_904B_counts$barcodes))
primary_904_counts <- primary_904_counts %>%
group_by(barcodes) %>%
summarize(total_count = sum(counts))
primary_904_counts<- primary_904_counts %>%
mutate(relative_count = total_count/sum(total_count))
primary_904_counts$relative_count_squared <- primary_904_counts$relative_count^2
probability_of_monoclonality <- c()
for (i in 2:9){
probability_of_monoclonality <- c(probability_of_monoclonality, sum(primary_904_counts$relative_count^i))
}
theoretical_result <- data.frame(cluster_size = 2:9,
monoclonality = probability_of_monoclonality,
oligoclonality = 1-probability_of_monoclonality)
ggplot(theoretical_result,aes(x = cluster_size, y = oligoclonality)) +
geom_line()
centi_df %>%
filter(grepl("_904_", centi_df$basename)) %>%
group_by(cluster_category_no_WBCs) %>%
filter(n() > 1) %>%
summarize(prop = mean(more_than_one == "Yes" & !is.na(more_than_one))) %>%
ungroup() %>%
mutate(cluster_category_no_WBCs = as.numeric(cluster_category_no_WBCs)) %>%
ggplot(aes(x = cluster_category_no_WBCs, y = prop)) +
geom_point() +
labs(x = "Cluster size", y = "Proportion oligoclonal Clusters")+
theme_classic() +
geom_line(theoretical_result[1:5,], mapping = aes(x = cluster_size, y = oligoclonality))
###### Do the same with the next tumor
primary_905A <- read_delim("../../validation_experiment/Primary_tumor_csv_files/20220812.B-905A_R2_stats.csv",
col_names = F, delim = "\t")
primary_905B <- read_delim("../../validation_experiment/Primary_tumor_csv_files/20220812.B-905B_R2_stats.csv",
col_names = F, delim = "\t" )
colnames(primary_905A)[1] <- "barcodes"
colnames(primary_905A)[3] <- "counts"
colnames(primary_905B)[1] <- "barcodes"
colnames(primary_905B)[3] <- "counts"
primary_905A_counts <-  primary_905A %>%
filter(counts !=0)
primary_905B_counts <-  primary_905B %>%
filter(counts !=0)
length(intersect(primary_905A_counts$barcodes,primary_905B_counts$barcodes))
primary_905_counts <- rbind(primary_905A_counts,primary_905B_counts)
primary_905_counts <- primary_905_counts %>%
filter(barcodes %in% intersect(primary_905A_counts$barcodes,primary_905B_counts$barcodes))
primary_905_counts <- primary_905_counts %>%
group_by(barcodes) %>%
summarize(total_count = sum(counts))
primary_905_counts<- primary_905_counts %>%
mutate(relative_count = total_count/sum(total_count))
summary(primary_905_counts)
theoretical_result_905 <- data.frame(cluster_size = 2:9,
monoclonality = probability_of_monoclonality,
oligoclonality = 1-probability_of_monoclonality)
centi_df %>%
filter(grepl("_905_", centi_df$basename)) %>%
group_by(cluster_category_no_WBCs) %>%
#  filter(n() > 1) %>%
summarize(prop = mean(more_than_one == "Yes" & !is.na(more_than_one))) %>%
ungroup() %>%
mutate(cluster_category_no_WBCs = as.numeric(cluster_category_no_WBCs)) %>%
ggplot(aes(x = cluster_category_no_WBCs, y = prop)) +
geom_point() +
labs(x = "Cluster size", y = "Proportion oligoclonal Clusters")+
theme_classic() +
geom_line(theoretical_result_905, mapping = aes(x = cluster_size, y = oligoclonality))
ggplot(theoretical_result,aes(x = cluster_size, y = oligoclonality)) +
geom_line()
# Group the rows by the "value" column only
summary_df_filter %>%
group_by(value) %>%
summarize(prop = mean(more_than_one == "Yes" & !is.na(more_than_one))) %>%
ungroup() %>%
ggplot(aes(x = as.factor(value), y = prop)) +
geom_bar(stat = "identity", fill = colors[1:4], width = 0.8, position = position_dodge(width=0.6)) +
labs(x = "Primary Tumor complexity", y = "Proportion of oligoclonal Clusters")+
theme_classic()#+
value
prop
summary_df_filtered
summary_df_filter
summary_df_filter %>%
group_by(value) %>%
summarize(prop = mean(more_than_one == "Yes" & !is.na(more_than_one))) %>%
ungroup()$prop
summary_df_filter %>%
group_by(value) %>%
summarize(prop = mean(more_than_one == "Yes" & !is.na(more_than_one))) %>%
ungroup()
coverage<-read.table("../../input_folder/Br61/Br61_covScore.txt",header=TRUE,sep="\t", stringsAsFactors=F, row.names=1)
head(coverage)
d<-read.table("../../input_folder/Br61/Br61_postSampling_skyblue3.txt",header=TRUE,sep="\t", stringsAsFactors=F, row.names=1)
mat<-as.matrix(d)
mat[1:4, 1:4]
mat2 <- mat
diag(mat2) <- 1
min_dist <- apply(mat2, 1, min) # find minimum distance to other mutations
selected_muts <- which(min_dist<0.5) # select those below 0.5 say
mat3 <- mat[selected_muts, selected_muts]
d_mat <- as.dist(mat3)
hc <- hclust(d_mat, "average")                   ## hierarchical clustering of mutations based on distance matrix
par(cex=0.6)
plot(hc, main = "Dendrogram based on average pairwise distance", sub = "", xlab = "Separating mutations")
mat2 <- mat
diag(mat2) <- 1
min_dist <- apply(mat2, 1, min) # find minimum distance to other mutations
selected_muts <- which(min_dist<0.8) # select those below 0.5 say
mat3 <- mat[selected_muts, selected_muts]
d_mat <- as.dist(mat3)
hc <- hclust(d_mat, "average")                   ## hierarchical clustering of mutations based on distance matrix
par(cex=0.6)
plot(hc, main = "Dendrogram based on average pairwise distance", sub = "", xlab = "Separating mutations")
mat2 <- mat
diag(mat2) <- 1
min_dist <- apply(mat2, 1, min) # find minimum distance to other mutations
selected_muts <- which(min_dist<Inf) # select those below 0.5 say
mat3 <- mat[selected_muts, selected_muts]
d_mat <- as.dist(mat3)
hc <- hclust(d_mat, "average")                   ## hierarchical clustering of mutations based on distance matrix
par(cex=0.6)
plot(hc, main = "Dendrogram based on average pairwise distance", sub = "", xlab = "Separating mutations")
mat2 <- mat
diag(mat2) <- 1
min_dist <- apply(mat2, 1, min) # find minimum distance to other mutations
selected_muts <- which(min_dist<1) # select those below 0.5 say
mat3 <- mat[selected_muts, selected_muts]
d_mat <- as.dist(mat3)
hc <- hclust(d_mat, "average")                   ## hierarchical clustering of mutations based on distance matrix
par(cex=0.6)
plot(hc, main = "Dendrogram based on average pairwise distance", sub = "", xlab = "Separating mutations")
d<-read.table("../../input_folder/Br61/Br61_postSampling_khaki3.txt",header=TRUE,sep="\t", stringsAsFactors=F, row.names=1)
mat<-as.matrix(d)
mat[1:4, 1:4]
mat2 <- mat
diag(mat2) <- 1
min_dist <- apply(mat2, 1, min) # find minimum distance to other mutations
selected_muts <- which(min_dist<1) # select those below 0.5 say
mat3 <- mat[selected_muts, selected_muts]
d_mat <- as.dist(mat3)
hc <- hclust(d_mat, "average")                   ## hierarchical clustering of mutations based on distance matrix
par(cex=0.6)
plot(hc, main = "Dendrogram based on average pairwise distance", sub = "", xlab = "Separating mutations")
mat2 <- mat
diag(mat2) <- 1
min_dist <- apply(mat2, 1, min) # find minimum distance to other mutations
selected_muts <- which(min_dist<0.1) # select those below 0.5 say
mat3 <- mat[selected_muts, selected_muts]
d_mat <- as.dist(mat3)
hc <- hclust(d_mat, "average")                   ## hierarchical clustering of mutations based on distance matrix
par(cex=0.6)
plot(hc, main = "Dendrogram based on average pairwise distance", sub = "", xlab = "Separating mutations")
mat2 <- mat
diag(mat2) <- 1
min_dist <- apply(mat2, 1, min) # find minimum distance to other mutations
selected_muts <- which(min_dist<0.5) # select those below 0.5 say
mat3 <- mat[selected_muts, selected_muts]
d_mat <- as.dist(mat3)
hc <- hclust(d_mat, "average")                   ## hierarchical clustering of mutations based on distance matrix
par(cex=0.6)
plot(hc, main = "Dendrogram based on average pairwise distance", sub = "", xlab = "Separating mutations")
mat2 <- mat
diag(mat2) <- 1
min_dist <- apply(mat2, 1, min) # find minimum distance to other mutations
selected_muts <- which(min_dist<0.7) # select those below 0.5 say
mat3 <- mat[selected_muts, selected_muts]
d_mat <- as.dist(mat3)
hc <- hclust(d_mat, "average")                   ## hierarchical clustering of mutations based on distance matrix
par(cex=0.6)
plot(hc, main = "Dendrogram based on average pairwise distance", sub = "", xlab = "Separating mutations")
mat2 <- mat
diag(mat2) <- 1
min_dist <- apply(mat2, 1, min) # find minimum distance to other mutations
selected_muts <- which(min_dist<0.9) # select those below 0.5 say
mat3 <- mat[selected_muts, selected_muts]
d_mat <- as.dist(mat3)
hc <- hclust(d_mat, "average")                   ## hierarchical clustering of mutations based on distance matrix
par(cex=0.6)
plot(hc, main = "Dendrogram based on average pairwise distance", sub = "", xlab = "Separating mutations")
d_mat <- as.dist(mat3)
hc <- hclust(d_mat, "average")                   ## hierarchical clustering of mutations based on distance matrix
par(cex=0.6)
plot(hc, main = "Dendrogram based on average pairwise distance", sub = "", xlab = "Separating mutations")
mat2 <- mat
diag(mat2) <- 1
min_dist <- apply(mat2, 1, min) # find minimum distance to other mutations
selected_muts <- which(min_dist<0.95) # select those below 0.5 say
mat3 <- mat[selected_muts, selected_muts]
d_mat <- as.dist(mat3)
hc <- hclust(d_mat, "average")                   ## hierarchical clustering of mutations based on distance matrix
par(cex=0.6)
plot(hc, main = "Dendrogram based on average pairwise distance", sub = "", xlab = "Separating mutations")
mat2 <- mat
diag(mat2) <- 1
min_dist <- apply(mat2, 1, min) # find minimum distance to other mutations
selected_muts <- which(min_dist<0.98) # select those below 0.5 say
mat3 <- mat[selected_muts, selected_muts]
d_mat <- as.dist(mat3)
hc <- hclust(d_mat, "average")                   ## hierarchical clustering of mutations based on distance matrix
par(cex=0.6)
plot(hc, main = "Dendrogram based on average pairwise distance", sub = "", xlab = "Separating mutations")
mat2 <- mat
diag(mat2) <- 1
min_dist <- apply(mat2, 1, min) # find minimum distance to other mutations
selected_muts <- which(min_dist<1) # select those below 0.5 say
mat3 <- mat[selected_muts, selected_muts]
d_mat <- as.dist(mat3)
hc <- hclust(d_mat, "average")                   ## hierarchical clustering of mutations based on distance matrix
par(cex=0.6)
plot(hc, main = "Dendrogram based on average pairwise distance", sub = "", xlab = "Separating mutations")
mat2 <- mat
diag(mat2) <- 1
min_dist <- apply(mat2, 1, min) # find minimum distance to other mutations
selected_muts <- which(min_dist<0.3) # select those below 0.5 say
mat3 <- mat[selected_muts, selected_muts]
d_mat <- as.dist(mat3)
hc <- hclust(d_mat, "average")                   ## hierarchical clustering of mutations based on distance matrix
par(cex=0.6)
plot(hc, main = "Dendrogram based on average pairwise distance", sub = "", xlab = "Separating mutations")
par(cex=0.6)
plot(hc, main = "Dendrogram based on average pairwise distance", sub = "", xlab = "Separating mutations")
abline(h=0.488, lwd = 2, lty = 2, col = "green")
#geneGroups <- cutree(hc, k = NULL, h = 0.488)
geneGroups <- cutree(hc, k = 1)
cluster1 <- names(geneGroups)[geneGroups == 1]
cluster1
d1 <- d[cluster1 , cluster1]
colMeans(d1, na.rm = FALSE, dims = 1)
(top_names <- names(sort(colMeans(d1, na.rm = FALSE, dims = 1))))
top_df <- as.data.frame(colMeans(d1[top_names]))
colnames(top_df) <- "avgDist"
top_muts_1 <- merge(top_df, coverage, all.x=TRUE, by=0, sort=FALSE)
colnames(top_muts_1)[1] <- "mutation"
top_muts_1
d<-read.table("../../input_folder/Br61/Br61_postSampling_khaki3.txt",header=TRUE,sep="\t", stringsAsFactors=F, row.names=1)
mat<-as.matrix(d)
mat[1:4, 1:4]
d<-read.table("../../input_folder/Br61/Br61_postSampling_plum.txt",header=TRUE,sep="\t", stringsAsFactors=F, row.names=1)
mat<-as.matrix(d)
mat[1:4, 1:4]
mat2 <- mat
diag(mat2) <- 1
min_dist <- apply(mat2, 1, min) # find minimum distance to other mutations
selected_muts <- which(min_dist<0.3) # select those below 0.5 say
mat3 <- mat[selected_muts, selected_muts]
d_mat <- as.dist(mat3)
hc <- hclust(d_mat, "average")                   ## hierarchical clustering of mutations based on distance matrix
par(cex=0.6)
plot(hc, main = "Dendrogram based on average pairwise distance", sub = "", xlab = "Separating mutations")
mat2 <- mat
diag(mat2) <- 1
min_dist <- apply(mat2, 1, min) # find minimum distance to other mutations
selected_muts <- which(min_dist<0.5) # select those below 0.5 say
mat3 <- mat[selected_muts, selected_muts]
d_mat <- as.dist(mat3)
hc <- hclust(d_mat, "average")                   ## hierarchical clustering of mutations based on distance matrix
par(cex=0.6)
plot(hc, main = "Dendrogram based on average pairwise distance", sub = "", xlab = "Separating mutations")
mat2 <- mat
diag(mat2) <- 1
min_dist <- apply(mat2, 1, min) # find minimum distance to other mutations
selected_muts <- which(min_dist<0.3) # select those below 0.5 say
mat3 <- mat[selected_muts, selected_muts]
d_mat <- as.dist(mat3)
hc <- hclust(d_mat, "average")                   ## hierarchical clustering of mutations based on distance matrix
par(cex=0.6)
plot(hc, main = "Dendrogram based on average pairwise distance", sub = "", xlab = "Separating mutations")
par(cex=0.6)
plot(hc, main = "Dendrogram based on average pairwise distance", sub = "", xlab = "Separating mutations")
abline(h=0.488, lwd = 2, lty = 2, col = "green")
#geneGroups <- cutree(hc, k = NULL, h = 0.488)
geneGroups <- cutree(hc, k = 1)
cluster1 <- names(geneGroups)[geneGroups == 1]
cluster1
d1 <- d[cluster1 , cluster1]
colMeans(d1, na.rm = FALSE, dims = 1)
(top_names <- names(sort(colMeans(d1, na.rm = FALSE, dims = 1))))
top_df <- as.data.frame(colMeans(d1[top_names]))
colnames(top_df) <- "avgDist"
top_muts_1 <- merge(top_df, coverage, all.x=TRUE, by=0, sort=FALSE)
colnames(top_muts_1)[1] <- "mutation"
top_muts_1
knitr::opts_chunk$set(echo = TRUE)
(paste(paste("Computing genomic distances of leaves:", 7, sep = " "), 41, sep = " "))
produce_Distance_Posterior(i,j,postSampling, treeName, nCells,
nMutations, nClusters,
alleleCount,ClusterID,
mutatedReadCounts,totalReadCounts,wbcStatus,
nSamplingEvents = 1000))
inputFolder <- "../../input_folder"
treeName <- "Br61"
source("functions.R")
input <- load_data(inputFolder, treeName)
postSampling <- input$postSampling
nClusters <- input$nClusters
ClusterID <- input$clusterID
nCells <- input$nCells
nMutations <- input$nMutations
nClusters <- input$nClusters
alleleCount <- input$alleleCount
ClusterID <- input$ClusterID
mutatedReadCounts <- input$mutatedReadCounts
totalReadCounts <- input$totalReadCounts
wbcStatus <- input$wbcStatus
(paste(paste("Computing genomic distances of leaves:", 7, sep = " "), 41, sep = " "))
produce_Distance_Posterior(i,j,postSampling, treeName, nCells,
nMutations, nClusters,
alleleCount,ClusterID,
mutatedReadCounts,totalReadCounts,wbcStatus,
nSamplingEvents = 1000)
i <- 7
j <- 41
(paste(paste("Computing genomic distances of leaves:", i, sep = " "), j, sep = " "))
produce_Distance_Posterior(i,j,postSampling, treeName, nCells,
nMutations, nClusters,
alleleCount,ClusterID,
mutatedReadCounts,totalReadCounts,wbcStatus,
nSamplingEvents = 1000)
desired_values <- sample(1:length(postSampling), size = 1000, replace = FALSE) %>% sort()
postSampling <- postSampling[desired_values]
inputFolder <- "../../input_folder"
treeName <- "Br61"
source("functions.R")
input <- load_data(inputFolder, treeName)
postSampling <- input$postSampling
nClusters <- input$nClusters
ClusterID <- input$clusterID
nCells <- input$nCells
nMutations <- input$nMutations
nClusters <- input$nClusters
alleleCount <- input$alleleCount
ClusterID <- input$ClusterID
mutatedReadCounts <- input$mutatedReadCounts
totalReadCounts <- input$totalReadCounts
wbcStatus <- input$wbcStatus
desired_values <- sample(1:length(postSampling), size = 1000, replace = FALSE) %>% sort()
postSampling <- postSampling[desired_values]
i <- 7
j <- 41
(paste(paste("Computing genomic distances of leaves:", i, sep = " "), j, sep = " "))
produce_Distance_Posterior(i,j,postSampling, treeName, nCells,
nMutations, nClusters,
alleleCount,ClusterID,
mutatedReadCounts,totalReadCounts,wbcStatus,
nSamplingEvents = 1000)
same_genotype <- list(c(7,41), c(0,34), c(0,28),c(34,28),c(21,2), c(15,29), c(15,4),c(29,4))
for (it in 1:length(same_genotype)){
i <- same_genotype[[it]][1]
j <- same_genotype[[it]][2]
(paste(paste("Computing genomic distances of leaves:", i, sep = " "), j, sep = " "))
produce_Distance_Posterior(i,j,postSampling, treeName, nCells,
nMutations, nClusters,
alleleCount,ClusterID,
mutatedReadCounts,totalReadCounts,wbcStatus,
nSamplingEvents = 1000)
}
