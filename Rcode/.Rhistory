knitr::opts_chunk$set(echo = TRUE)
inputFolder <- "../../input_folder"
treeName <- "Pr9"
source("functions.R")
input <- load_data(inputFolder, treeName)
postSampling <- input$postSampling
nClusters <- input$nClusters
ClusterID <- input$clusterID
nCells <- input$nCells
nMutations <- input$nMutations
nClusters <- input$nClusters
alleleCount <- input$alleleCount
mutatedReadCounts <- input$mutatedReadCounts
totalReadCounts <- input$totalReadCounts
sampleDescription <- input$sample_description
print(sampleDescription)
candidate_pairs <- load_monoclonal_pairs(inputFolder, treeName)
print(candidate_pairs$monoclonal_pairs)
print(candidate_pairs$distance_matrix)
monoclonal_pairs <- list(c("Pr9_CTC_23","Pr9_CTC_13"), c("Pr9_CTC_24","Pr9_CTC_15"), c("Pr9_CTC_24", "Pr9_CTC_18"), c("Pr9_CTC_9", "Pr9_CTC_20"))
candidate_pairs$full_distance_matrix[c("Pr9_CTC_15.realigned.bam", "Pr9_CTC_18.realigned.bam","Pr9_CTC_24.realigned.bam"),c("Pr9_CTC_15.realigned.bam", "Pr9_CTC_18.realigned.bam","Pr9_CTC_24.realigned.bam")]
nTreeSamplingEvents <- 100
nMutationSamplingEvents <- 100
distance <- computeClusterSplits(sampleDescription, postSampling, treeName, nCells,
nMutations, nClusters,
alleleCount,
mutatedReadCounts, totalReadCounts,
nMutationSamplingEvents = nMutationSamplingEvents, nTreeSamplingEvents = nTreeSamplingEvents, cellPairSelection = monoclonal_pairs)
data_file <- sprintf("%s/%s/%s_genotypes.ped", inputFolder, treeName,treeName)
data <- read_delim(data_file, delim = '\t',col_names = FALSE)
data
data2 <- data %>% select(!2:6)
distance_matrix <- matrix(0, nrow = nrow(data2), ncol = nrow(data2))
i <- 1
data2 %>% select(!1) %>% slice(i)
data2
View(data2)
candidate_pairs <- load_monoclonal_pairs(inputFolder, treeName)
print(candidate_pairs$monoclonal_pairs)
print(candidate_pairs$distance_matrix)
print(candidate_pairs$monoclonal_pairs)
View(candidate_pairs$distance_matrix)
source("functions.R")
str("")
class("")
class(1)
knitr::opts_chunk$set(echo = TRUE)
inputFolder <- "../../input_folder"
treeName <- "Pr9"
knitr::opts_chunk$set(echo = TRUE)
inputFolder <- "../../input_folder"
treeName <- "Pr9"
source("functions.R")
input <- load_data(inputFolder, treeName)
postSampling <- input$postSampling
nClusters <- input$nClusters
ClusterID <- input$clusterID
nCells <- input$nCells
nMutations <- input$nMutations
nClusters <- input$nClusters
alleleCount <- input$alleleCount
mutatedReadCounts <- input$mutatedReadCounts
totalReadCounts <- input$totalReadCounts
sampleDescription <- input$sample_description
print(sampleDescription)
candidate_pairs <- load_monoclonal_pairs(inputFolder, treeName)
print(candidate_pairs$monoclonal_pairs)
print(candidate_pairs$distance_matrix)
monoclonal_pairs <- list(c("Pr9_CTC_23","Pr9_CTC_13"), c("Pr9_CTC_24","Pr9_CTC_15"), c("Pr9_CTC_24", "Pr9_CTC_18"), c("Pr9_CTC_9", "Pr9_CTC_20"))
candidate_pairs <- load_monoclonal_pairs(inputFolder, treeName cutoff = 2)
source("functions.R")
candidate_pairs <- load_monoclonal_pairs(inputFolder, treeName cutoff = 2)
candidate_pairs <- load_monoclonal_pairs(inputFolder, treeName, cutoff = 2)
print(candidate_pairs$monoclonal_pairs)
print(candidate_pairs$distance_matrix)
candidate_pairs <- load_monoclonal_pairs(inputFolder, treeName, cutoff = 3)
print(candidate_pairs$monoclonal_pairs)
print(candidate_pairs$distance_matrix)
candidate_pairs <- load_monoclonal_pairs(inputFolder, treeName)
print(candidate_pairs$monoclonal_pairs)
print(candidate_pairs$distance_matrix)
tumor_cells <- paste0((sampleDescription %>% filter(color == "gray93"))$ClusterName,".realigned.bam")
print(candidate_pairs$full_distance_matrix[tumor_cells,tumor_cells])
which(candidate_pairs$full_distance_matrix[tumor_cells,tumor_cells] == 1)
monoclonal_pairs <- list(c("Br61_CTC_8", "Br61_CTC_17"))
monoclonal_pairs <- c(monoclonal_pairs, list(c("Br61_CTC_12", "Br61_CTC_32"), c("Br61_CTC_1","Br61_CTC_46"),c("Br61_CTC_1","Br61_CTC_40"),c("Br61_CTC_46","Br61_CTC_40")))
nTreeSamplingEvents <- 100
nMutationSamplingEvents <- 100
distance <- computeClusterSplits(sampleDescription, postSampling, treeName, nCells,
nMutations, nClusters,
alleleCount,
mutatedReadCounts, totalReadCounts,
nMutationSamplingEvents = nMutationSamplingEvents, nTreeSamplingEvents = nTreeSamplingEvents, cellPairSelection = monoclonal_pairs)
nMutations
inputFolder <- "../../input_folder/filtered"
treeName <- "Br61"
source("functions.R")
input <- load_data(inputFolder, treeName)
inputFolder <- "../../input_folder/filtered"
treeName <- "Br61"
source("functions.R")
input <- load_data(inputFolder, treeName)
postSampling <- input$postSampling
nClusters <- input$nClusters
ClusterID <- input$clusterID
nCells <- input$nCells
nMutations <- input$nMutations
nClusters <- input$nClusters
alleleCount <- input$alleleCount
mutatedReadCounts <- input$mutatedReadCounts
totalReadCounts <- input$totalReadCounts
sampleDescription <- input$sample_description
knitr::opts_chunk$set(echo = TRUE)
inputFolder <- "../../input_folder/filtered"
treeName <- "Br61"
source("functions.R")
input <- load_data(inputFolder, treeName)
postSampling <- input$postSampling
nClusters <- input$nClusters
ClusterID <- input$clusterID
nCells <- input$nCells
nMutations <- input$nMutations
nClusters <- input$nClusters
alleleCount <- input$alleleCount
mutatedReadCounts <- input$mutatedReadCounts
totalReadCounts <- input$totalReadCounts
sampleDescription <- input$sample_description
print(sampleDescription)
candidate_pairs <- load_monoclonal_pairs(inputFolder, treeName)
monoclonal_pairs <- list(c("Br61_CTC_8", "Br61_CTC_17"))
monoclonal_pairs <- c(monoclonal_pairs, list(c("Br61_CTC_12", "Br61_CTC_32"), c("Br61_CTC_1","Br61_CTC_46"),c("Br61_CTC_1","Br61_CTC_40"),c("Br61_CTC_46","Br61_CTC_40")))
nTreeSamplingEvents <- 100
nMutationSamplingEvents <- 100
distance <- computeClusterSplits(sampleDescription, postSampling, treeName, nCells,
nMutations, nClusters,
alleleCount,
mutatedReadCounts, totalReadCounts,
nMutationSamplingEvents = nMutationSamplingEvents, nTreeSamplingEvents = nTreeSamplingEvents, cellPairSelection = monoclonal_pairs)
distance <- computeClusterSplits(sampleDescription, postSampling, treeName, nCells,
nMutations, nClusters,
alleleCount,
mutatedReadCounts, totalReadCounts,
nMutationSamplingEvents = nMutationSamplingEvents, nTreeSamplingEvents = nTreeSamplingEvents)
nTreeSamplingEvents <- 100
nMutationSamplingEvents <- 100
distance <- computeClusterSplits(sampleDescription, postSampling, treeName, nCells,
nMutations, nClusters,
alleleCount,
mutatedReadCounts, totalReadCounts,
nMutationSamplingEvents = nMutationSamplingEvents, nTreeSamplingEvents = nTreeSamplingEvents, cellPairSelection = monoclonal_pairs)
knitr::opts_chunk$set(echo = TRUE)
inputFolder <- "../../input_folder"
treeName <- "Pr9"
source("functions.R")
input <- load_data(inputFolder, treeName)
postSampling <- input$postSampling
nClusters <- input$nClusters
ClusterID <- input$clusterID
nCells <- input$nCells
nMutations <- input$nMutations
nClusters <- input$nClusters
alleleCount <- input$alleleCount
mutatedReadCounts <- input$mutatedReadCounts
totalReadCounts <- input$totalReadCounts
sampleDescription <- input$sample_description
print(sampleDescription)
candidate_pairs <- load_monoclonal_pairs(inputFolder, treeName, cutoff = 3)
print(candidate_pairs$monoclonal_pairs)
print(candidate_pairs$distance_matrix)
monoclonal_pairs <- list(c("Pr9_CTC_23","Pr9_CTC_13"), c("Pr9_CTC_24","Pr9_CTC_15"), c("Pr9_CTC_24", "Pr9_CTC_18"), c("Pr9_CTC_9", "Pr9_CTC_20"))
candidate_pairs$full_distance_matrix[c("Pr9_CTC_15.realigned.bam", "Pr9_CTC_18.realigned.bam","Pr9_CTC_24.realigned.bam"),c("Pr9_CTC_15.realigned.bam", "Pr9_CTC_18.realigned.bam","Pr9_CTC_24.realigned.bam")]
nTreeSamplingEvents <- 100
nMutationSamplingEvents <- 100
distance <- computeClusterSplits(sampleDescription, postSampling, treeName, nCells,
nMutations, nClusters,
alleleCount,
mutatedReadCounts, totalReadCounts,
nMutationSamplingEvents = nMutationSamplingEvents, nTreeSamplingEvents = nTreeSamplingEvents, cellPairSelection = monoclonal_pairs)
knitr::opts_chunk$set(echo = TRUE)
inputFolder <- "../../input_folder"
treeName <- "Br16_C"
source("functions.R")
input <- load_data(inputFolder, treeName)
postSampling <- input$postSampling
nClusters <- input$nClusters
ClusterID <- input$clusterID
nCells <- input$nCells
nMutations <- input$nMutations
nClusters <- input$nClusters
alleleCount <- input$alleleCount
mutatedReadCounts <- input$mutatedReadCounts
totalReadCounts <- input$totalReadCounts
sampleDescription <- input$sample_description
print(sampleDescription)
x_values <- seq(0.01, 0.5, by = 0.01)
y_values <- 1 / x_values
curve_data <- data.frame(x = x_values, y = y_values)
data.frame(x = mutatedReadCounts %>% sapply(function(x){sum(x!=0)/length(x)})) %>%
ggplot(aes(x = x)) + geom_histogram(binwidth = 0.01) +
geom_line(data = curve_data, aes(x = x, y = y), color = "red", size = 1)
totalReadCounts <- totalReadCounts[(mutatedReadCounts %>% sapply(function(x){sum(x!=0)})) > 0]
mutatedReadCounts <- mutatedReadCounts[(mutatedReadCounts %>% sapply(function(x){sum(x!=0)})) > 0]
nMutations <- length(totalReadCounts)
candidate_pairs <- load_monoclonal_pairs(inputFolder, treeName)
print(candidate_pairs$monoclonal_pairs)
print(candidate_pairs$distance_matrix)
tumor_cells <- paste0((sampleDescription %>% filter(color == "gray93"))$ClusterName,".realigned.bam")
print(candidate_pairs$full_distance_matrix[tumor_cells,tumor_cells])
which((candidate_pairs$full_distance_matrix[tumor_cells,tumor_cells] == 2))
monoclonal_pairs <- list(c("Br16_C33","Br16_C34"))
nTreeSamplingEvents <- 100
nMutationSamplingEvents <- 100
distance <- computeClusterSplits(sampleDescription, postSampling, treeName, nCells,
nMutations, nClusters,
alleleCount,
mutatedReadCounts, totalReadCounts,
nMutationSamplingEvents = nMutationSamplingEvents, nTreeSamplingEvents = nTreeSamplingEvents, cellPairSelection = monoclonal_pairs)
postSampling
source("functions.R")
############
#Config
############
inputFolder <- "../../input_folder"
treeName <- "LM2"
treeName <- "Br7"
############
#Data preprocessing
############
input <- load_data(inputFolder, treeName)
postSampling <- input$postSampling
nClusters <- input$nClusters
ClusterID <- input$clusterID
nCells <- input$nCells
nMutations <- input$nMutations
nClusters <- input$nClusters
alleleCount <- input$alleleCount
mutatedReadCounts <- input$mutatedReadCounts
totalReadCounts <- input$totalReadCounts
sampleDescription <- input$sample_description
mutationDescription <- input$mutationDescription
annotations <- input$annotations
postSampling
postSamplingTrees2 <- lapply(postSamplingTrees2, FUN = function(entry){return(entry$Tree)})
nTreeSamplingEvents <- 20
desired_values <- sample(1:length(postSampling), size = nTreeSamplingEvents, replace = FALSE) %>% sort()
postSampling2 <- postSampling[desired_values]
postSamplingTrees2 <- lapply(postSamplingTrees2, FUN = function(entry){return(entry$Tree)})
nTreeSamplingEvents <- 20
desired_values <- sample(1:length(postSampling), size = nTreeSamplingEvents, replace = FALSE) %>% sort()
postSampling2 <- postSampling[desired_values]
postSamplingTrees2 <- lapply(postSampling2, FUN = function(entry){return(entry$Tree)})
postSamplingSeqErrRate2 <- lapply(postSampling2, FUN = function(entry){return(entry$SequencingErrorRate)})
postSamplingDropoutRate2 <- lapply(postSampling2, FUN = function(entry){return(entry$DropoutRate)})
nMutations
nClusters
mutatedReadCounts
totalReadCounts
postSamplingDropoutRate2
genotypes <- getProbabilityOfBeingMutated(postSamplingTrees2, nCells, nMutations, nClusters,
alleleCount, ClusterID, mutatedReadCounts, totalReadCounts,
postSamplingDropoutRate2, postSamplingSeqErrRate2,
sampleDescription$WBC)
getProbabilityOfBeingMutated(postSamplingTrees2, nCells, nMutations, nClusters,
alleleCount, ClusterID, mutatedReadCounts, totalReadCounts,
postSamplingDropoutRate2, postSamplingSeqErrRate2,
sampleDescription$WBC)
postSamplingTrees2
source("functions.R")
genotypes <- getProbabilityOfBeingMutated(postSampling2, nCells, nMutations, nClusters,
alleleCount, ClusterID, mutatedReadCounts, totalReadCounts,
sampleDescription$WBC)
genotypes
exp(genotypes)
lapply(genotypes, FUN = exp)
X <- c(1,2)
Y <- c("A","B")
expand.grid(X, Y)
# Install and load ggplot2 package if not already installed
# install.packages("ggplot2")
library(ggplot2)
logGenotypes <- getProbabilityOfBeingMutated(postSampling2, nCells, nMutations, nClusters,
alleleCount, ClusterID, mutatedReadCounts, totalReadCounts,
sampleDescription$WBC)
genotypes <- lapply(logGenotypes, FUN = exp)
as.data.frame(genotypes)
as.data.frame(genotypes) %>%nrow()
?as.data.frame
data.frame(genotypes)
?data.frame
genotypes
?do.call
data.frame(do.call(cbind,genotypes)
)
ncells
nCells
library(ggplot2)
# Plotting heatmap using ggplot2
ggplot(data = reshape2::melt(genotypes), aes(x = Var2, y = Var1, fill = value)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "red") +
labs(title = "Heatmap Example", x = "Columns", y = "Rows")
install.packages("reshape2")
# Plotting heatmap using ggplot2
ggplot(data = reshape2::melt(genotypes), aes(x = Var2, y = Var1, fill = value)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "red") +
labs(title = "Heatmap Example", x = "Columns", y = "Rows")
reshape2::melt(genotypes)
reshape2::melt(genotypes)
colnames(reshape2::melt(genotypes))
rownames(reshape2::melt(genotypes))
genotypes
genotypes <- lapply(logGenotypes, FUN = exp)
genotypes <- data.frame(do.call(cbind,genotypes))
genotypes
?pivot_longer
reshape2::melt(genotypes)
colnames(reshape2::melt(genotypes))
?reshape::melt
?reshape2::melt
genotypes <- lapply(logGenotypes, FUN = exp)
reshape2::melt(genotypes)
genotypes <- lapply(logGenotypes, FUN = exp)
genotypes <- data.frame(do.call(cbind,genotypes))
genotypes
rownames(genotypes) <- 1:40
genotypes
colnames(reshape2::melt(genotypes))
genotypes <- lapply(logGenotypes, FUN = exp)
genotypes <- data.frame(do.call(cbind,genotypes))
genotypes <-
genotypes %>%
as_tibble() %>%
rownames_to_column("Var1") %>%
pivot_longer(-Var1, names_to = "Var2", values_to = "value")
genotypes
ggplot(genotypes, aes(Var1, Var2)) +
geom_tile(aes(fill = value)) +
geom_text(aes(label = round(value, 1))) +
scale_fill_gradient(low = "white", high = "red")
ggplot(genotypes, aes(Var1, Var2)) +
geom_tile(aes(fill = value)) +
scale_fill_gradient(low = "white", high = "red")
ncells
nCells
nMutations
# Plotting heatmap using ggplot2
ggplot(data = , aes(x = Var2, y = Var1, fill = value)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "red") +
labs(title = "Heatmap Example", x = "Columns", y = "Rows")
ggplot(genotypes, aes(Var1, Var2)) +
geom_tile(aes(fill = value)) +
scale_fill_gradient(low = "white", high = "red")
ggplot(genotypes, aes(Var1, Var2)) +
geom_tile(aes(fill = value)) +
scale_fill_gradient(low = "white", high = "red") +
scale_fill_viridis()
#> Warning: The `x` argument of `as_tibble.matrix()` must have unique column names if
#> `.name_repair` is omitted as of tibble 2.0.0.
#> ℹ Using compatibility `.name_repair`.
library(viridis)
#> Warning: The `x` argument of `as_tibble.matrix()` must have unique column names if
#> `.name_repair` is omitted as of tibble 2.0.0.
#> ℹ Using compatibility `.name_repair`.
install.packages("viridis")
ggplot(genotypes, aes(Var1, Var2)) +
geom_tile(aes(fill = value)) +
scale_fill_gradient(low = "white", high = "red") +
scale_fill_viridis()
library(viridis)
ggplot(genotypes, aes(Var1, Var2)) +
geom_tile(aes(fill = value)) +
scale_fill_gradient(low = "white", high = "red") +
scale_fill_viridis()
sampleDescription
logGenotypes <- getProbabilityOfBeingMutated(postSampling2, nCells, nMutations, nClusters,
alleleCount, ClusterID, mutatedReadCounts, totalReadCounts,
rep(0,nCells))
genotypes <- lapply(logGenotypes, FUN = exp)
genotypes <- data.frame(do.call(cbind,genotypes))
colnames(reshape2::melt(genotypes))
genotypes <-
genotypes %>%
as_tibble() %>%
rownames_to_column("Var1") %>%
pivot_longer(-Var1, names_to = "Var2", values_to = "value")
ggplot(genotypes, aes(Var1, Var2)) +
geom_tile(aes(fill = value)) +
scale_fill_gradient(low = "white", high = "red") +
scale_fill_viridis()
genotypes
genotypes
sampleDescription$WBC
genotypes$Var2
?substr
genotypes$Var2 %>% substr(start = 2)
genotypes$Var2 %>% substr(start = 2, stop = nchar(.))
genotypes$Var2 %>% substr(start = 2, stop = nchar(.)) %>% as.numeric()
(genotypes$Var2 %>% substr(start = 2, stop = nchar(.)) %>% as.numeric())-1
sampleDescription$WBC[(genotypes$Var2 %>% substr(start = 2, stop = nchar(.)) %>% as.numeric())-1]
genotypes
sampleDescription$WBC
genotypes$WBC <- sampleDescription$WBC[(genotypes$Var2 %>% substr(start = 2, stop = nchar(.)) %>% as.numeric())-1]
sampleDescription$WBC[(genotypes$Var2 %>% substr(start = 2, stop = nchar(.)) %>% as.numeric())-1]
sampleDescription$WBC[(genotypes$Var2 %>% substr(start = 2, stop = nchar(.)) %>% as.numeric())-1] &>& length()
sampleDescription$WBC[(genotypes$Var2 %>% substr(start = 2, stop = nchar(.)) %>% as.numeric())-1] %>% length()
genotypes$Var2 %>% length()
genotypes$Var2 %>% substr(start = 2, stop = nchar(.)) %>% length()
genotypes$Var2 %>% substr(start = 2, stop = nchar(.)) %>%  as.numeric()) %>% length()
genotypes$Var2 %>% substr(start = 2, stop = nchar(.)) %>%  as.numeric() %>% length()
(genotypes$Var2 %>% substr(start = 2, stop = nchar(.)) %>%  as.numeric())-1 %>% length()
((genotypes$Var2 %>% substr(start = 2, stop = nchar(.)) %>%  as.numeric())-1) %>% length()
sampleDescription$WBC[(genotypes$Var2 %>% substr(start = 2, stop = nchar(.)) %>% as.numeric())-1] %>% length()
(genotypes$Var2 %>% substr(start = 2, stop = nchar(.)) %>% as.numeric())-1
(genotypes$Var2 %>% substr(start = 2, stop = nchar(.)) %>% as.numeric())-1 %>% max()
((genotypes$Var2 %>% substr(start = 2, stop = nchar(.)) %>% as.numeric())-1) %>% max()
nCells
((genotypes$Var2 %>% substr(start = 2, stop = nchar(.)) %>% as.numeric())-1) %>% length()
((genotypes$Var2 %>% substr(start = 2, stop = nchar(.)) %>% as.numeric())-1) %>% min()
((genotypes$Var2 %>% substr(start = 2, stop = nchar(.)) %>% as.numeric())-1) %>% length()
sampleDescription$WBC[((genotypes$Var2 %>% substr(start = 2, stop = nchar(.)) %>% as.numeric())-1)]
sampleDescription
sampleDescription$WBC
sampleDescription$WBC[(genotypes$Var2 %>% substr(start = 2, stop = nchar(.)) %>% as.numeric())]
sampleDescription$WBC[(genotypes$Var2 %>% substr(start = 2, stop = nchar(.)) %>% as.numeric())] %>% length()
genotypes$WBC <- sampleDescription$WBC[(genotypes$Var2 %>% substr(start = 2, stop = nchar(.)) %>% as.numeric())]
genotypes <- lapply(logGenotypes, FUN = exp)
genotypes <- data.frame(do.call(cbind,genotypes))
colnames(reshape2::melt(genotypes))
sampleDescription$WBC
genotypes$WBC <- sampleDescription$WBC[(genotypes$Var2 %>% substr(start = 2, stop = nchar(.)) %>% as.numeric())]
genotypes <- lapply(logGenotypes, FUN = exp)
genotypes <- data.frame(do.call(cbind,genotypes))
colnames(reshape2::melt(genotypes))
genotypes <-
genotypes %>%
as_tibble() %>%
rownames_to_column("Var1") %>%
pivot_longer(-Var1, names_to = "Var2", values_to = "value")
genotypes <- lapply(logGenotypes, FUN = exp)
genotypes <- data.frame(do.call(cbind,genotypes))
genotypes <-
genotypes %>%
as_tibble() %>%
rownames_to_column("Var1") %>%
pivot_longer(-Var1, names_to = "Var2", values_to = "value")
library(viridis)
ggplot(genotypes, aes(Var1, Var2)) +
geom_tile(aes(fill = value)) +
scale_fill_gradient(low = "white", high = "red") +
scale_fill_viridis()
sampleDescription$WBC
genotypes$WBC <- sampleDescription$WBC[(genotypes$Var2 %>% substr(start = 2, stop = nchar(.)) %>% as.numeric())-1]
genotypes <- lapply(logGenotypes, FUN = exp)
genotypes <- data.frame(do.call(cbind,genotypes))
genotypes <-
genotypes %>%
as_tibble() %>%
rownames_to_column("Var1") %>%
pivot_longer(-Var1, names_to = "Var2", values_to = "value")
library(viridis)
ggplot(genotypes, aes(Var1, Var2)) +
geom_tile(aes(fill = value)) +
scale_fill_gradient(low = "white", high = "red") +
scale_fill_viridis()
genotypes$WBC <- sampleDescription$WBC[(genotypes$Var2 %>% substr(start = 2, stop = nchar(.)) %>% as.numeric())]
genotypes %>%
filter(genotypes$WBC ==1) %>%
ggplot(aes(x = value, fill = Var2, alpha = 0.6)) %>%
geom_histogram()
genotypes %>%
filter(genotypes$WBC ==1) %>%
ggplot(aes(x = value, fill = Var2, alpha = 0.6)) +
geom_histogram()
genotypes %>%
filter(genotypes$WBC ==1) %>%
ggplot(aes(x = value, fill = Var2, alpha = 0.6)) +
geom_histogram(position = "identity")
genotypes %>%
filter(genotypes$WBC ==1) %>%
ggplot(aes(x = value, fill = Var2, alpha = 0.6)) +
geom_histogram(position = "identity", binwith = 0.01)
genotypes %>%
filter(genotypes$WBC ==1) %>%
ggplot(aes(x = value, fill = Var2, alpha = 0.6)) +
geom_histogram(position = "identity", binwidth = 0.01)
genotypes %>%
filter(genotypes$WBC ==1) %>%
ggplot(aes(x = value, fill = Var2, alpha = 0.6)) +
geom_histogram(position = "identity", binwidth = 0.005)
genotypes
genotypes <- genotypes %>% mutate(genotype = value > 0.36)
genotypes
ggplot(genotypes, aes(Var1, Var2)) +
geom_tile(aes(fill = genotype)) +
scale_fill_gradient(low = "white", high = "red") +
scale_fill_viridis()
rlang::last_trace()
ggplot(genotypes, aes(Var1, Var2)) +
geom_tile(aes(fill = genotype)) +
scale_fill_viridis()
library(viridis)
ggplot(genotypes, aes(Var1, Var2)) +
geom_tile(aes(fill = value)) +
scale_fill_viridis()
genotypes
genotypes <- genotypes %>% mutate(genotype = as.integer(value > 0.36))
ggplot(genotypes, aes(Var1, Var2)) +
geom_tile(aes(fill = genotype)) +
scale_fill_gradient(low = "white", high = "red") +
scale_fill_viridis()
