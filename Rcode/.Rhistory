<<<<<<< Updated upstream
alleleCount, ClusterID, mutatedReadCounts,
totalReadCounts,dropoutRate, seqErrRate, 1,
wbcStatus)
PASS <- TRUE
if(length(mutationDistributions) != nMutations) PASS <- FALSE
numberOfNodesInTree <- 2*nCells-1
for (i in 1:length(mutationDistributions)){
if(length(mutationDistributions[[i]]) != numberOfNodesInTree) PASS <- FALSE
}
return(list("PASS" = PASS, "logMutationDistributions" = mutationDistributions))
nSamplings <- 10000
nMutations <- 10
nCells <- 24
logProbs <- test_mutation_distribution()$logMutationDistributions
nSamplings <- 10000
nMutations <- 10
nCells <- 24
logProbs <- test_mutation_distribution()$logMutationDistributions
test_mutation_distribution()
test_mutation_distribution <- function(){
nCells <- 24
nMutations <- 10
nClusters <- 11
alleleCount <- c(8, 6, 2, 6, 2, 2, 2, 2, 8, 4, 6)
ClusterID <- c(0, 0, 0, 0, 1, 1, 1, 2,  3,  3,  3,  4,  5,  6,  7,  8,  8,  8,  8,  9,  9, 10, 10, 10)
mutatedReadCounts <- list(c(0 , 4,  0,  0,  0,  0,  4,  0, 11,  0,  0),
c(4, 0, 1, 3, 0, 0, 0, 0, 1, 0, 0),
c(0,  0,  0, 25,  0,  0,  0,  0,  4,  0,  0),
c(3, 0, 0, 3, 0, 0, 0, 0, 1, 0, 0),
c(8,  1, 16,  4, 73,  0,  0,  0,  5,  0,  0),
c(0,  0,  9,  0,  0,  0, 26,  0,  8,  0,  0),
c(0,  0,  2,  0, 22,  0,  0,  0,  8,  0,  0),
c(12,  0,  0,  3,  0,  0,  0,  0,  0,  0,  0),
c(7,  0,  0,  0,  0,  0,  0,  0, 11,  0,  0),
c(16, 0,  0,  0,  0,  0,  0,  0, 11,  0,  0))
totalReadCounts <- list(c(31, 238,  0, 234, 0, 0, 20, 0, 147, 0, 245),
c(16, 31, 8, 68, 0, 0,  3,  0, 34,  0,  0),
c(5, 5, 64, 114, 0, 0, 128, 0,  51, 0,  0),
c(13, 16, 13, 26, 10,  0, 15,  0, 14,  3, 14),
c(120,  98, 102, 503, 181,   0,   0,   0,  50,   0, 156),
c(22,  6, 47,  0,  0,  0, 64,  0, 23, 14,  5),
c(0,  63,  62,   0,  45,   0, 171,   0,  99,   0,  93),
c(24, 12,  0,  6,  2,  0,  0,  0,  7,  0,  0),
c(14,  0,  0,  0,  0,  0,  0,  0, 49,  0, 24),
c(32,  42,   0, 282,   0,   0,   0,   0, 119,   0,  19))
seqErrRate <- 0.00225
dropoutRate <- 0.301
wbcStatus <- c(1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1)
tree <- c(34, 44, 26, 41, 33, 30, 38, 35, 37, 31, 26, 43, 44, 40, 32, 45, 25, 35, 42, 24 ,39 ,32 ,28, 27, 30, 33, 42, 29 ,46 ,46, 25 ,37, 39, 38, 28, 40, 31, 24, 45, 27, 36, 36, 43, 41, 34, 29)
ancestorMatrix <- parentVector2ancMatrix(tree, length(tree))
mutationDistributions <- computeMutationDistribution(nCells, nMutations, nClusters, ancestorMatrix,
alleleCount, ClusterID, mutatedReadCounts,
totalReadCounts,dropoutRate, seqErrRate, 1,
wbcStatus)
PASS <- TRUE
if(length(mutationDistributions) != nMutations) PASS <- FALSE
numberOfNodesInTree <- 2*nCells-1
for (i in 1:length(mutationDistributions)){
if(length(mutationDistributions[[i]]) != numberOfNodesInTree) PASS <- FALSE
}
return(list("PASS" = PASS, "logMutationDistributions" = mutationDistributions))
}
nSamplings <- 10000
nMutations <- 10
nCells <- 24
logProbs <- test_mutation_distribution()$logMutationDistributions
mutationSampling <- transposeMatrix(sampleMutationsPlacement(nSamplings,
nMutations, logProbs),
nSamplings, nMutations)
for(mutation in mutationSampling){
sampledPlacement <- vector()
for(i in 0:(2*nCells-2)){
sampledPlacement <- c(sampledPlacement,sum(sample == i))
}
sampledPlacement <- sampledPlacement/sum(sampledPlacement)
print(sampledPlacement)
}
mutationSampling <- transposeMatrix(sampleMutationsPlacement(nSamplings,
nMutations, logProbs),
nSamplings, nMutations)
for(mutation in mutationSampling){
sampledPlacement <- vector()
for(i in 0:(2*nCells-2)){
sampledPlacement <- c(sampledPlacement,sum(sample == i))
}
sampledPlacement <- sampledPlacement/sum(sampledPlacement)
print(sampledPlacement)
}
logProbs <- test_mutation_distribution()$logMutationDistributions
mutationSampling <- transposeMatrix(sampleMutationsPlacement(nSamplings,
nMutations, logProbs),
nSamplings, nMutations)
mutationSampling
for(mutation in mutationSampling){
sampledPlacement <- vector()
for(i in 0:(2*nCells-2)){
sampledPlacement <- c(sampledPlacement,sum(sample == i))
}
sampledPlacement <- sampledPlacement/sum(sampledPlacement)
print(sampledPlacement)
}
sampledPlacement <- vector()
for(mutation in mutationSampling){
sampledPlacement <- vector()
for(i in 0:(2*nCells-2)){
sampledPlacement <- c(sampledPlacement,sum(mutation == i))
}
sampledPlacement <- sampledPlacement/sum(sampledPlacement)
print(sampledPlacement)
}
logProbs[[i]]
logProbs[[i1]]
logProbs[[1]]
for(mutation in mutationSampling){
sampledPlacement <- vector()
for(i in 0:(2*nCells-2)){
sampledPlacement <- c(sampledPlacement,sum(mutation == i))
}
sampledPlacement <- sampledPlacement/sum(sampledPlacement)
print(sampledPlacement)
Probs <- logProbs[[i]] %>% exp()
Probs <- Probs/sum(Probs)
i <- i+1
}
logProbs
i <- 1
for(mutation in mutationSampling){
sampledPlacement <- vector()
for(i in 0:(2*nCells-2)){
sampledPlacement <- c(sampledPlacement,sum(mutation == i))
}
sampledPlacement <- sampledPlacement/sum(sampledPlacement)
print(sampledPlacement)
Probs <- logProbs[[i]] %>% exp()
Probs <- Probs/sum(Probs)
i <- i+1
}
length(mutationSampling)
length(logProbs)
for(mutation in 1:length(mutationSampling)){
sampledPlacement <- vector()
for(i in 0:(2*nCells-2)){
sampledPlacement <- c(sampledPlacement,sum(mutationSampling[[mutation]] == i))
}
sampledPlacement <- sampledPlacement/sum(sampledPlacement)
print(sampledPlacement)
Probs <- logProbs[[mutations]] %>% exp()
Probs <- Probs/sum(Probs)
}
for(mutation in 1:length(mutationSampling)){
sampledPlacement <- vector()
for(i in 0:(2*nCells-2)){
sampledPlacement <- c(sampledPlacement,sum(mutationSampling[[mutation]] == i))
}
sampledPlacement <- sampledPlacement/sum(sampledPlacement)
print(sampledPlacement)
Probs <- logProbs[[mutation]] %>% exp()
Probs <- Probs/sum(Probs)
}
for(mutation in 1:length(mutationSampling)){
sampledPlacement <- vector()
for(i in 0:(2*nCells-2)){
sampledPlacement <- c(sampledPlacement,sum(mutationSampling[[mutation]] == i))
}
sampledPlacement <- sampledPlacement/sum(sampledPlacement)
print(sampledPlacement)
Probs <- logProbs[[mutation]] %>% exp()
Probs <- Probs/sum(Probs)
print(Probs)
}
for(mutation in 1:length(mutationSampling)){
sampledPlacement <- vector()
for(i in 0:(2*nCells-2)){
sampledPlacement <- c(sampledPlacement,sum(mutationSampling[[mutation]] == i))
}
sampledPlacement <- sampledPlacement/sum(sampledPlacement)
print(sampledPlacement)
Probs <- logProbs[[mutation]] %>% exp()
Probs <- Probs/sum(Probs)
print((Probs-sampledPlacement)^2 %>% sum())
}
for(mutation in 1:length(mutationSampling)){
sampledPlacement <- vector()
for(i in 0:(2*nCells-2)){
sampledPlacement <- c(sampledPlacement,sum(mutationSampling[[mutation]] == i))
}
sampledPlacement <- sampledPlacement/sum(sampledPlacement)
Probs <- logProbs[[mutation]] %>% exp()
Probs <- Probs/sum(Probs)
print((Probs-sampledPlacement)^2 %>% sum())
}
nSamplings <- 1000
nMutations <- 10
nCells <- 24
logProbs <- test_mutation_distribution()$logMutationDistributions
mutationSampling <- transposeMatrix(sampleMutationsPlacement(nSamplings,
nMutations, logProbs),
nSamplings, nMutations)
for(mutation in 1:length(mutationSampling)){
sampledPlacement <- vector()
for(i in 0:(2*nCells-2)){
sampledPlacement <- c(sampledPlacement,sum(mutationSampling[[mutation]] == i))
}
sampledPlacement <- sampledPlacement/sum(sampledPlacement)
Probs <- logProbs[[mutation]] %>% exp()
Probs <- Probs/sum(Probs)
print((Probs-sampledPlacement)^2 %>% sum())
}
nSamplings <- 100
nMutations <- 10
nCells <- 24
logProbs <- test_mutation_distribution()$logMutationDistributions
mutationSampling <- transposeMatrix(sampleMutationsPlacement(nSamplings,
nMutations, logProbs),
nSamplings, nMutations)
for(mutation in 1:length(mutationSampling)){
sampledPlacement <- vector()
for(i in 0:(2*nCells-2)){
sampledPlacement <- c(sampledPlacement,sum(mutationSampling[[mutation]] == i))
}
sampledPlacement <- sampledPlacement/sum(sampledPlacement)
Probs <- logProbs[[mutation]] %>% exp()
Probs <- Probs/sum(Probs)
print((Probs-sampledPlacement)^2 %>% sum())
}
nSamplings <- 10
nMutations <- 10
nCells <- 24
logProbs <- test_mutation_distribution()$logMutationDistributions
mutationSampling <- transposeMatrix(sampleMutationsPlacement(nSamplings,
nMutations, logProbs),
nSamplings, nMutations)
for(mutation in 1:length(mutationSampling)){
sampledPlacement <- vector()
for(i in 0:(2*nCells-2)){
sampledPlacement <- c(sampledPlacement,sum(mutationSampling[[mutation]] == i))
}
sampledPlacement <- sampledPlacement/sum(sampledPlacement)
Probs <- logProbs[[mutation]] %>% exp()
Probs <- Probs/sum(Probs)
print((Probs-sampledPlacement)^2 %>% sum())
}
nSamplings <- 10000
nMutations <- 10
nCells <- 24
logProbs <- test_mutation_distribution()$logMutationDistributions
mutationSampling <- transposeMatrix(sampleMutationsPlacement(nSamplings,
nMutations, logProbs),
nSamplings, nMutations)
for(mutation in 1:length(mutationSampling)){
sampledPlacement <- vector()
for(i in 0:(2*nCells-2)){
sampledPlacement <- c(sampledPlacement,sum(mutationSampling[[mutation]] == i))
}
sampledPlacement <- sampledPlacement/sum(sampledPlacement)
Probs <- logProbs[[mutation]] %>% exp()
Probs <- Probs/sum(Probs)
print((Probs-sampledPlacement)^2 %>% sum())
}
nSamplings <- 100000
nMutations <- 10
nCells <- 24
logProbs <- test_mutation_distribution()$logMutationDistributions
mutationSampling <- transposeMatrix(sampleMutationsPlacement(nSamplings,
nMutations, logProbs),
nSamplings, nMutations)
for(mutation in 1:length(mutationSampling)){
sampledPlacement <- vector()
for(i in 0:(2*nCells-2)){
sampledPlacement <- c(sampledPlacement,sum(mutationSampling[[mutation]] == i))
}
sampledPlacement <- sampledPlacement/sum(sampledPlacement)
Probs <- logProbs[[mutation]] %>% exp()
Probs <- Probs/sum(Probs)
print((Probs-sampledPlacement)^2 %>% sum())
}
test_sampleMutationPlacements <- function(){
nSamplings <- 100000
nMutations <- 10
nCells <- 24
logProbs <- test_mutation_distribution()$logMutationDistributions
mutationSampling <- transposeMatrix(sampleMutationsPlacement(nSamplings,
nMutations, logProbs),
nSamplings, nMutations)
PASS <- TRUE
for(mutation in 1:length(mutationSampling)){
sampledPlacement <- vector()
for(i in 0:(2*nCells-2)){
sampledPlacement <- c(sampledPlacement,sum(mutationSampling[[mutation]] == i))
}
sampledPlacement <- sampledPlacement/sum(sampledPlacement)
Probs <- logProbs[[mutation]] %>% exp()
Probs <- Probs/sum(Probs)
if(((Probs-sampledPlacement)^2 %>% sum()) > 10e-4) PASS <- FALSE
}
return(PASS)
}
test_sampleMutationPlacements <- function(){
nSamplings <- 100000
nMutations <- 10
nCells <- 24
logProbs <- test_mutation_distribution()$logMutationDistributions
mutationSampling <- transposeMatrix(sampleMutationsPlacement(nSamplings,
nMutations, logProbs),
nSamplings, nMutations)
PASS <- TRUE
for(mutation in 1:length(mutationSampling)){
sampledPlacement <- vector()
for(i in 0:(2*nCells-2)){
sampledPlacement <- c(sampledPlacement,sum(mutationSampling[[mutation]] == i))
}
sampledPlacement <- sampledPlacement/sum(sampledPlacement)
Probs <- logProbs[[mutation]] %>% exp()
Probs <- Probs/sum(Probs)
if(((Probs-sampledPlacement)^2 %>% sum()) > 10e-4) PASS <- FALSE
}
return(PASS)
}
test_sampleMutationPlacements()
test_compute_pairwise_distance_of_leaves1()
test_compute_pairwise_distance_of_leaves2()
test_compute_pairwise_distance_of_leaves3()
test_find_MRCA1()
test_find_MRCA2()
test_find_MRCA3()
test_transposeMatrix()
test_mutation_distribution()
test_sampleMutationPlacements()
test_mutation_distribution <- function(){
nCells <- 24
nMutations <- 10
nClusters <- 11
alleleCount <- c(8, 6, 2, 6, 2, 2, 2, 2, 8, 4, 6)
ClusterID <- c(0, 0, 0, 0, 1, 1, 1, 2,  3,  3,  3,  4,  5,  6,  7,  8,  8,  8,  8,  9,  9, 10, 10, 10)
mutatedReadCounts <- list(c(0 , 4,  0,  0,  0,  0,  4,  0, 11,  0,  0),
c(4, 0, 1, 3, 0, 0, 0, 0, 1, 0, 0),
c(0,  0,  0, 25,  0,  0,  0,  0,  4,  0,  0),
c(3, 0, 0, 3, 0, 0, 0, 0, 1, 0, 0),
c(8,  1, 16,  4, 73,  0,  0,  0,  5,  0,  0),
c(0,  0,  9,  0,  0,  0, 26,  0,  8,  0,  0),
c(0,  0,  2,  0, 22,  0,  0,  0,  8,  0,  0),
c(12,  0,  0,  3,  0,  0,  0,  0,  0,  0,  0),
c(7,  0,  0,  0,  0,  0,  0,  0, 11,  0,  0),
c(16, 0,  0,  0,  0,  0,  0,  0, 11,  0,  0))
totalReadCounts <- list(c(31, 238,  0, 234, 0, 0, 20, 0, 147, 0, 245),
c(16, 31, 8, 68, 0, 0,  3,  0, 34,  0,  0),
c(5, 5, 64, 114, 0, 0, 128, 0,  51, 0,  0),
c(13, 16, 13, 26, 10,  0, 15,  0, 14,  3, 14),
c(120,  98, 102, 503, 181,   0,   0,   0,  50,   0, 156),
c(22,  6, 47,  0,  0,  0, 64,  0, 23, 14,  5),
c(0,  63,  62,   0,  45,   0, 171,   0,  99,   0,  93),
c(24, 12,  0,  6,  2,  0,  0,  0,  7,  0,  0),
c(14,  0,  0,  0,  0,  0,  0,  0, 49,  0, 24),
c(32,  42,   0, 282,   0,   0,   0,   0, 119,   0,  19))
seqErrRate <- 0.00225
dropoutRate <- 0.301
wbcStatus <- c(1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1)
tree <- c(34, 44, 26, 41, 33, 30, 38, 35, 37, 31, 26, 43, 44, 40, 32, 45, 25, 35, 42, 24 ,39 ,32 ,28, 27, 30, 33, 42, 29 ,46 ,46, 25 ,37, 39, 38, 28, 40, 31, 24, 45, 27, 36, 36, 43, 41, 34, 29)
ancestorMatrix <- parentVector2ancMatrix(tree, length(tree))
mutationDistributions <- computeMutationDistribution(nCells, nMutations, nClusters, ancestorMatrix,
alleleCount, ClusterID, mutatedReadCounts,
totalReadCounts,dropoutRate, seqErrRate, 1,
wbcStatus)
PASS <- TRUE
if(length(mutationDistributions) != nMutations) PASS <- FALSE
numberOfNodesInTree <- 2*nCells-1
for (i in 1:length(mutationDistributions)){
if(length(mutationDistributions[[i]]) != numberOfNodesInTree) PASS <- FALSE
}
return(list("logMutationDistributions" = mutationDistributions, "PASS" = PASS))
}
test_mutation_distribution()
=======
nMutations <- 2
outcome <- 0.25
res <- ComputePerMutationProbabilityOfPolyclonality(pairwiseGenealogy,
logMutationPlacementProbs,
nMutations, nCells)
res
source("functions.R")
r
r
r
r
r
treeParentVectorFormat <- c(6,8,1,1,3,3,8,6)
logMutationPlacementProbs <- list(log(c(0.5,0.5,0.00001,0.00001,0.00001,0.00001,0.00001,0.00001,0.00001)), log(c(0.00001,0.5,0.00001,0.5,0.00001,0.00001,0.00001,0.00001,0.00001)))
pairwiseGenealogy <- list(c(0,6,8), c(2,1), c(8), c(0,6,8,1,2))
nCells <- 5
nMutations <- 2
outcome <- 0.25
res <- ComputePerMutationProbabilityOfPolyclonality(pairwiseGenealogy,
logMutationPlacementProbs,
nMutations, nCells)
res
source("functions.R")
source("functions.R")
nMutations
source("functions.R")
source("functions.R")
std::vector<double> PerMutationProbabilityOfPolyclonality = {ComputePerMutationProbabilityOfPolyclonality(pairwiseGenealogy,
source("functions.R")
source("functions.R")
treeParentVectorFormat <- c(6,8,1,1,3,3,8,6)
logMutationPlacementProbs <- list(log(c(0.5,0.5,0.00001,0.00001,0.00001,0.00001,0.00001,0.00001,0.00001)), log(c(0.00001,0.5,0.00001,0.5,0.00001,0.00001,0.00001,0.00001,0.00001)))
pairwiseGenealogy <- list(c(0,6,8), c(2,1), c(8), c(0,6,8,1,2))
nCells <- 5
nMutations <- 2
outcome <- 0.25
res <- ComputePerMutationProbabilityOfPolyclonality(pairwiseGenealogy,
logMutationPlacementProbs,
nMutations, nCells)
res
sum(res)
res
treeParentVectorFormat <- c(6,8,1,1,3,3,8,6)
logMutationPlacementProbs <- list(log(c(0.5,0.5,0.00001,0.00001,0.00001,0.00001,0.00001,0.00001,0.00001)), log(c(0,0.5,0,0.5,0,0,0,0,0)))
pairwiseGenealogy <- list(c(0,6,8), c(2,1), c(8), c(0,6,8,1,2))
nCells <- 5
nMutations <- 2
outcome <- 0.25
res <- ComputePerMutationProbabilityOfPolyclonality(pairwiseGenealogy,
logMutationPlacementProbs,
nMutations, nCells)
res
source("functions.R")
treeParentVectorFormat <- c(6,8,1,1,3,3,8,6)
logMutationPlacementProbs <- list(log(c(0.5,0.5,0,0,0,0,0,0,0)), log(c(0,0.5,0,0.5,0,0,0,0,0)))
pairwiseGenealogy <- list(c(0,6,8), c(2,1), c(8), c(0,6,8,1,2))
nCells <- 5
nMutations <- 2
outcome <- 0.25
res <- ComputePerMutationProbabilityOfPolyclonality(pairwiseGenealogy,
logMutationPlacementProbs,
nMutations, nCells)
source("functions.R")
source("functions.R")
res <- ComputePerMutationProbabilityOfPolyclonality(pairwiseGenealogy,
logMutationPlacementProbs,
nMutations, nCells)
res
source("functions.R")
treeParentVectorFormat <- c(6,8,1,1,3,3,8,6)
logMutationPlacementProbs <- list(log(c(0.5,0.5,0,0,0,0,0,0,0)), log(c(0,0.5,0,0.5,0,0,0,0,0)))
pairwiseGenealogy <- list(c(0,6,8), c(2,1), c(8), c(0,6,8,1,2))
nCells <- 5
nMutations <- 2
outcome <- 0.25
res <- ComputePerMutationProbabilityOfPolyclonality(pairwiseGenealogy,
logMutationPlacementProbs,
nMutations, nCells)
res
source("functions.R")
res <- ComputePerMutationProbabilityOfPolyclonality(pairwiseGenealogy,
logMutationPlacementProbs,
nMutations, nCells)
source("functions.R")
treeParentVectorFormat <- c(6,8,1,1,3,3,8,6)
logMutationPlacementProbs <- list(log(c(0.5,0.5,0,0,0,0,0,0,0)), log(c(0,0.5,0,0.5,0,0,0,0,0)))
pairwiseGenealogy <- list(c(0,6,8), c(2,1), c(8), c(0,6,8,1,2))
nCells <- 5
nMutations <- 2
outcome <- 0.25
res <- ComputePerMutationProbabilityOfPolyclonality(pairwiseGenealogy,
logMutationPlacementProbs,
nMutations, nCells)
source("functions.R")
source("functions.R")
res <- ComputePerMutationProbabilityOfPolyclonality(pairwiseGenealogy,
logMutationPlacementProbs,
nMutations, nCells)
res
source("functions.R")
source("functions.R")
treeParentVectorFormat <- c(6,8,1,1,3,3,8,6)
logMutationPlacementProbs <- list(log(c(0.5,0.5,0,0,0,0,0,0,0)), log(c(0,0.5,0,0.5,0,0,0,0,0)))
pairwiseGenealogy <- list(c(0,6,8), c(2,1), c(8), c(0,6,8,1,2))
nCells <- 5
nMutations <- 2
outcome <- 0
res <- ComputePerMutationProbabilityOfPolyclonality(pairwiseGenealogy,
logMutationPlacementProbs,
nMutations, nCells)
res
res
source("functions.R")
treeParentVectorFormat <- c(6,8,1,1,3,3,8,6)
logMutationPlacementProbs <- list(log(c(0.5,0.5,0,0,0,0,0,0,0)), log(c(0,0.5,0,0.5,0,0,0,0,0)))
pairwiseGenealogy <- list(c(0,6,8), c(2,1), c(8), c(0,6,8,1,2))
nCells <- 5
nMutations <- 2
outcome <- 0
res <- ComputePerMutationProbabilityOfPolyclonality(pairwiseGenealogy,
logMutationPlacementProbs,
nMutations, nCells)
source("functions.R")
treeParentVectorFormat <- c(6,8,1,1,3,3,8,6)
logMutationPlacementProbs <- list(log(c(0.5,0.5,0,0,0,0,0,0,0)), log(c(0,0.5,0,0.5,0,0,0,0,0)))
pairwiseGenealogy <- list(c(0,6,8), c(2,1), c(8), c(0,6,8,1,2))
nCells <- 5
nMutations <- 2
outcome <- 0
res <- ComputePerMutationProbabilityOfPolyclonality(pairwiseGenealogy,
logMutationPlacementProbs,
nMutations, nCells)
res
source("functions.R")
res <- ComputePerMutationProbabilityOfPolyclonality(pairwiseGenealogy,
logMutationPlacementProbs,
nMutations, nCells)
res
source("functions.R")
res <- ComputePerMutationProbabilityOfPolyclonality(pairwiseGenealogy,
logMutationPlacementProbs,
nMutations, nCells)
res
logMutationPlacementProbs <- list(log(c(0,0.5,0.5,0,0,0,0,0,0)), log(c(0,0.5,0,0.5,0,0,0,0,0)))
outcome <- 0
res <- ComputePerMutationProbabilityOfPolyclonality(pairwiseGenealogy,
logMutationPlacementProbs,
nMutations, nCells)
res
logMutationPlacementProbs <- list(log(c(0,0.4,0.6,0,0,0,0,0,0)), log(c(0,0.4,0,0.6,0,0,0,0,0)))
outcome <- 0
res <- ComputePerMutationProbabilityOfPolyclonality(pairwiseGenealogy,
logMutationPlacementProbs,
nMutations, nCells)
res
logMutationPlacementProbs <- list(log(c(0.4,0.6,0,0,0,0,0,0,0)), log(c(0,0.4,0,0.6,0,0,0,0,0)))
outcome <- 0
res <- ComputePerMutationProbabilityOfPolyclonality(pairwiseGenealogy,
logMutationPlacementProbs,
nMutations, nCells)
res
logMutationPlacementProbs <- list(log(c(0,0.6,0.4,0,0,0,0,0,0)), log(c(0,0.4,0,0.6,0,0,0,0,0)))
outcome <- 0
res <- ComputePerMutationProbabilityOfPolyclonality(pairwiseGenealogy,
logMutationPlacementProbs,
nMutations, nCells)
res
source("functions.R")
source("functions.R")
source("functions.R")
>>>>>>> Stashed changes
source("functions.R")
############
#Config
############
inputFolder <- "../../input_folder"
treeName <- "LM2"
############
#Data preprocessing
############
input <- load_data(inputFolder, treeName)
postSampling <- input$postSampling
nClusters <- input$nClusters
ClusterID <- input$clusterID
nCells <- input$nCells
nMutations <- input$nMutations
nClusters <- input$nClusters
alleleCount <- input$alleleCount
mutatedReadCounts <- input$mutatedReadCounts
totalReadCounts <- input$totalReadCounts
sampleDescription <- input$sample_description
mutationDescription <- input$mutationDescription
annotations <- input$annotations
test_compute_pairwise_distance_of_leaves1()
<<<<<<< Updated upstream
=======
test_compute_pairwise_distance_of_leaves2()
test_compute_pairwise_distance_of_leaves3()
test_find_MRCA1()
test_find_MRCA2()
test_find_MRCA3()
test_computePairwiseDistanceOfLeavesGivenTree()
test_sampleMutationPlacements()
test_ComputePerMutationProbabilityOfPolyclonality()
>>>>>>> Stashed changes
source("functions.R")
test_ComputePerMutationProbabilityOfPolyclonality()
source("functions.R")
test_ComputePerMutationProbabilityOfPolyclonality()
splittingProbs <- computeClusterSplits(sampleDescription, postSampling, treeName, nCells,
nMutations, nClusters,
alleleCount,
mutatedReadCounts, totalReadCounts,
nMutationSamplingEvents = 20, nTreeSamplingEvents = 20)
warnings()
############
#Config
############
inputFolder <- "../../input_folder"
treeName <- "LM2"
############
#Data preprocessing
############
input <- load_data(inputFolder, treeName)
postSampling <- input$postSampling
nClusters <- input$nClusters
ClusterID <- input$clusterID
nCells <- input$nCells
nMutations <- input$nMutations
nClusters <- input$nClusters
alleleCount <- input$alleleCount
mutatedReadCounts <- input$mutatedReadCounts
totalReadCounts <- input$totalReadCounts
sampleDescription <- input$sample_description
mutationDescription <- input$mutationDescription
annotations <- input$annotations
test_compute_pairwise_distance_of_leaves1()
<<<<<<< Updated upstream
test_compute_pairwise_distance_of_leaves1()
source("functions.R")
test_compute_pairwise_distance_of_leaves1()
source("functions.R")
source("functions.R")
############
#Config
############
inputFolder <- "../../input_folder"
treeName <- "LM2"
############
#Data preprocessing
############
=======
test_compute_pairwise_distance_of_leaves2()
test_compute_pairwise_distance_of_leaves3()
test_find_MRCA1()
test_find_MRCA2()
test_find_MRCA3()
test_computePairwiseDistanceOfLeavesGivenTree()
test_computePairwiseDistanceOfLeavesGivenTree()
test_transposeMatrix()
test_mutation_distribution()
test_sampleMutationPlacements()
test_ComputePerMutationProbabilityOfPolyclonality()
test_computePairwiseDistanceOfLeavesGivenTree()
knitr::opts_chunk$set(echo = TRUE)
inputFolder <- "../../input_folder"
treeName <- "Br7"
>>>>>>> Stashed changes
input <- load_data(inputFolder, treeName)
postSampling <- input$postSampling
nClusters <- input$nClusters
ClusterID <- input$clusterID
nCells <- input$nCells
nMutations <- input$nMutations
nClusters <- input$nClusters
alleleCount <- input$alleleCount
mutatedReadCounts <- input$mutatedReadCounts
totalReadCounts <- input$totalReadCounts
sampleDescription <- input$sample_description
mutationDescription <- input$mutationDescription
annotations <- input$annotations
<<<<<<< Updated upstream
test_compute_pairwise_distance_of_leaves1()
test_compute_pairwise_distance_of_leaves2()
test_compute_pairwise_distance_of_leaves3()
test_find_MRCA1()
test_find_MRCA2()
test_find_MRCA3()
test_computePairwiseDistanceOfLeavesGivenTree()
test_transposeMatrix()
test_mutation_distribution()
test_sampleMutationPlacements()
source("functions.R")
source("functions.R")
source("functions.R")
############
#Config
############
inputFolder <- "../../input_folder"
treeName <- "LM2"
############
#Data preprocessing
############
input <- load_data(inputFolder, treeName)
postSampling <- input$postSampling
nClusters <- input$nClusters
ClusterID <- input$clusterID
nCells <- input$nCells
nMutations <- input$nMutations
nClusters <- input$nClusters
alleleCount <- input$alleleCount
mutatedReadCounts <- input$mutatedReadCounts
totalReadCounts <- input$totalReadCounts
sampleDescription <- input$sample_description
mutationDescription <- input$mutationDescription
annotations <- input$annotations
test_compute_pairwise_distance_of_leaves1()
test_compute_pairwise_distance_of_leaves2()
test_compute_pairwise_distance_of_leaves3()
test_find_MRCA1()
test_find_MRCA2()
test_find_MRCA3()
test_computePairwiseDistanceOfLeavesGivenTree()
test_transposeMatrix()
test_mutation_distribution()
test_sampleMutationPlacements()
splittingProbs <- computeClusterSplits(sampleDescription, postSampling, treeName, nCells,
nMutations, nClusters,
alleleCount,
mutatedReadCounts, totalReadCounts,
nMutationSamplingEvents = 20, nTreeSamplingEvents = 20)
warning()
?geom_histogram
splittingProbs <- computeClusterSplits(sampleDescription, postSampling, treeName, nCells,
nMutations, nClusters,
alleleCount,
mutatedReadCounts, totalReadCounts,
nMutationSamplingEvents = 20, nTreeSamplingEvents = 20)
splittingProbs <- computeClusterSplits(sampleDescription, postSampling, treeName, nCells,
nMutations, nClusters,
alleleCount,
mutatedReadCounts, totalReadCounts,
nMutationSamplingEvents = 20, nTreeSamplingEvents = 20)
source("functions.R")
splittingProbs <- computeClusterSplits(sampleDescription, postSampling, treeName, nCells,
nMutations, nClusters,
alleleCount,
mutatedReadCounts, totalReadCounts,
nMutationSamplingEvents = 20, nTreeSamplingEvents = 20)
warnings()
=======
print(sampleDescription)
candidate_pairs <- load_monoclonal_pairs(inputFolder, treeName)
print(candidate_pairs$monoclonal_pairs)
print(candidate_pairs$distance_matrix)
nTreeSamplingEvents <- 10
nMutationSamplingEvents <- 100
distance <- computeClusterSplits(sampleDescription, postSampling, treeName, nCells,
nMutations, nClusters,
alleleCount,
mutatedReadCounts, totalReadCounts,
nMutationSamplingEvents = nMutationSamplingEvents, nTreeSamplingEvents = nTreeSamplingEvents)
knitr::opts_chunk$set(echo = TRUE)
inputFolder <- "../../input_folder"
treeName <- "LM2"
source("functions.R")
input <- load_data(inputFolder, treeName)
postSampling <- input$postSampling
nClusters <- input$nClusters
ClusterID <- input$clusterID
nCells <- input$nCells
nMutations <- input$nMutations
nClusters <- input$nClusters
alleleCount <- input$alleleCount
mutatedReadCounts <- input$mutatedReadCounts
totalReadCounts <- input$totalReadCounts
sampleDescription <- input$sample_description
print(sampleDescription)
candidate_pairs <- load_monoclonal_pairs(inputFolder, treeName)
print(candidate_pairs$monoclonal_pairs)
print(candidate_pairs$distance_matrix)
print(candidate_pairs$full_distance_matrix)
monoclonal_pairs <- list(c("LM2_E1","LM2_A81"))
tumor_cells <- paste0((sampleDescription %>% filter(color == "gray93"))$ClusterName,".realigned.bam")
print(candidate_pairs$full_distance_matrix[tumor_cells,tumor_cells])
which((candidate_pairs$full_distance_matrix[tumor_cells,tumor_cells] == 6) | (candidate_pairs$full_distance_matrix[tumor_cells,tumor_cells] == 7))
tumor_cells <- paste0((sampleDescription %>% filter(color == "gray93"))$ClusterName,".realigned.bam")
print(candidate_pairs$full_distance_matrix[tumor_cells,tumor_cells])
which((candidate_pairs$full_distance_matrix[tumor_cells,tumor_cells] == 6) | (candidate_pairs$full_distance_matrix[tumor_cells,tumor_cells] == 7))
nTreeSamplingEvents <- 10
nMutationSamplingEvents <- 10
distance <- computeClusterSplits(sampleDescription, postSampling, treeName, nCells,
nMutations, nClusters,
alleleCount,
mutatedReadCounts, totalReadCounts,
nMutationSamplingEvents = nMutationSamplingEvents, nTreeSamplingEvents = nTreeSamplingEvents, cellPairSelection = monoclonal_pairs)
knitr::opts_chunk$set(echo = TRUE)
inputFolder <- "../../input_folder"
treeName <- "Pr9"
source("functions.R")
input <- load_data(inputFolder, treeName)
postSampling <- input$postSampling
nClusters <- input$nClusters
ClusterID <- input$clusterID
nCells <- input$nCells
nMutations <- input$nMutations
nClusters <- input$nClusters
alleleCount <- input$alleleCount
mutatedReadCounts <- input$mutatedReadCounts
totalReadCounts <- input$totalReadCounts
sampleDescription <- input$sample_description
print(sampleDescription)
candidate_pairs <- load_monoclonal_pairs(inputFolder, treeName)
print(candidate_pairs$monoclonal_pairs)
print(candidate_pairs$distance_matrix)
monoclonal_pairs <- list(c("Pr9_CTC_23","Pr9_CTC_13"), c("Pr9_CTC_24","Pr9_CTC_15"), c("Pr9_CTC_24", "Pr9_CTC_18"), c("Pr9_CTC_9", "Pr9_CTC_20"))
candidate_pairs$full_distance_matrix[c("Pr9_CTC_15.realigned.bam", "Pr9_CTC_18.realigned.bam","Pr9_CTC_24.realigned.bam"),c("Pr9_CTC_15.realigned.bam", "Pr9_CTC_18.realigned.bam","Pr9_CTC_24.realigned.bam")]
nTreeSamplingEvents <- 100
nMutationSamplingEvents <- 1000
distance <- computeClusterSplits(sampleDescription, postSampling, treeName, nCells,
nMutations, nClusters,
alleleCount,
mutatedReadCounts, totalReadCounts,
nMutationSamplingEvents = nMutationSamplingEvents, nTreeSamplingEvents = nTreeSamplingEvents, cellPairSelection = monoclonal_pairs)
nTreeSamplingEvents <- 500
nMutationSamplingEvents <- 1000
distance <- computeClusterSplits(sampleDescription, postSampling, treeName, nCells,
nMutations, nClusters,
alleleCount,
mutatedReadCounts, totalReadCounts,
nMutationSamplingEvents = nMutationSamplingEvents, nTreeSamplingEvents = nTreeSamplingEvents)
nTreeSamplingEvents <- 100
nMutationSamplingEvents <- 1000
distance <- computeClusterSplits(sampleDescription, postSampling, treeName, nCells,
nMutations, nClusters,
alleleCount,
mutatedReadCounts, totalReadCounts,
nMutationSamplingEvents = nMutationSamplingEvents, nTreeSamplingEvents = nTreeSamplingEvents)
knitr::opts_chunk$set(echo = TRUE)
inputFolder <- "../../input_folder"
treeName <- "Br61"
source("functions.R")
input <- load_data(inputFolder, treeName)
postSampling <- input$postSampling
nClusters <- input$nClusters
ClusterID <- input$clusterID
nCells <- input$nCells
nMutations <- input$nMutations
nClusters <- input$nClusters
alleleCount <- input$alleleCount
mutatedReadCounts <- input$mutatedReadCounts
totalReadCounts <- input$totalReadCounts
sampleDescription <- input$sample_description
print(sampleDescription)
candidate_pairs <- load_monoclonal_pairs(inputFolder, treeName)
print(candidate_pairs$monoclonal_pairs)
print(candidate_pairs$distance_matrix)
tumor_cells <- paste0((sampleDescription %>% filter(color == "gray93"))$ClusterName,".realigned.bam")
print(candidate_pairs$full_distance_matrix[tumor_cells,tumor_cells])
which(candidate_pairs$full_distance_matrix[tumor_cells,tumor_cells] == 1)
monoclonal_pairs <- list(c("Br61_CTC_8", "Br61_CTC_17"))
nTreeSamplingEvents <- 1000
nMutationSamplingEvents <- 1000
distance <- computeClusterSplits(sampleDescription, postSampling, treeName, nCells,
nMutations, nClusters,
alleleCount,
mutatedReadCounts, totalReadCounts,
nMutationSamplingEvents = nMutationSamplingEvents, nTreeSamplingEvents = nTreeSamplingEvents, cellPairSelection = monoclonal_pairs)
nTreeSamplingEvents <- 10
nMutationSamplingEvents <- 100
distance <- computeClusterSplits(sampleDescription, postSampling, treeName, nCells,
nMutations, nClusters,
alleleCount,
mutatedReadCounts, totalReadCounts,
nMutationSamplingEvents = nMutationSamplingEvents, nTreeSamplingEvents = nTreeSamplingEvents, cellPairSelection = monoclonal_pairs)
nTreeSamplingEvents <- 100
nMutationSamplingEvents <- 1000
distance <- computeClusterSplits(sampleDescription, postSampling, treeName, nCells,
nMutations, nClusters,
alleleCount,
mutatedReadCounts, totalReadCounts,
nMutationSamplingEvents = nMutationSamplingEvents, nTreeSamplingEvents = nTreeSamplingEvents, cellPairSelection = monoclonal_pairs)
distance <- computeClusterSplits(sampleDescription, postSampling, treeName, nCells,
nMutations, nClusters,
alleleCount,
mutatedReadCounts, totalReadCounts,
nMutationSamplingEvents = nMutationSamplingEvents, nTreeSamplingEvents = nTreeSamplingEvents)
knitr::opts_chunk$set(echo = TRUE)
inputFolder <- "../../input_folder"
treeName <- "Br16_AC"
source("functions.R")
input <- load_data(inputFolder, treeName)
postSampling <- input$postSampling
nClusters <- input$nClusters
ClusterID <- input$clusterID
nCells <- input$nCells
nMutations <- input$nMutations
nClusters <- input$nClusters
alleleCount <- input$alleleCount
mutatedReadCounts <- input$mutatedReadCounts
totalReadCounts <- input$totalReadCounts
sampleDescription <- input$sample_description
print(sampleDescription)
x_values <- seq(0.01, 0.5, by = 0.01)
y_values <- 1 / x_values
curve_data <- data.frame(x = x_values, y = y_values)
data.frame(x = mutatedReadCounts %>% sapply(function(x){sum(x!=0)/length(x)})) %>%
ggplot(aes(x = x)) + geom_histogram(binwidth = 0.01) +
geom_line(data = curve_data, aes(x = x, y = y), color = "red", size = 1)
totalReadCounts <- totalReadCounts[(mutatedReadCounts %>% sapply(function(x){sum(x!=0)})) > 0]
mutatedReadCounts <- mutatedReadCounts[(mutatedReadCounts %>% sapply(function(x){sum(x!=0)})) > 0]
nMutations <- length(totalReadCounts)
candidate_pairs <- load_monoclonal_pairs(inputFolder, treeName)
print(candidate_pairs$monoclonal_pairs)
print(candidate_pairs$distance_matrix)
tumor_cells <- paste0((sampleDescription %>% filter(color == "gray93"))$ClusterName,".realigned.bam")
print(candidate_pairs$full_distance_matrix[tumor_cells,tumor_cells])
which((candidate_pairs$full_distance_matrix[tumor_cells,tumor_cells] == 4))
monoclonal_pairs <- list(c("Br16_AC21","Br16_AC19"), c("Br16_AC25", "Br16_AC19"), c("Br16_AC25", "Br16_AC21"))
nTreeSamplingEvents <- 10
nMutationSamplingEvents <- 100
distance <- computeClusterSplits(sampleDescription, postSampling, treeName, nCells,
nMutations, nClusters,
alleleCount,
mutatedReadCounts, totalReadCounts,
nMutationSamplingEvents = nMutationSamplingEvents, nTreeSamplingEvents = nTreeSamplingEvents, cellPairSelection = monoclonal_pairs)
nTreeSamplingEvents <- 100
nMutationSamplingEvents <- 1000
distance <- computeClusterSplits(sampleDescription, postSampling, treeName, nCells,
nMutations, nClusters,
alleleCount,
mutatedReadCounts, totalReadCounts,
nMutationSamplingEvents = nMutationSamplingEvents, nTreeSamplingEvents = nTreeSamplingEvents, cellPairSelection = monoclonal_pairs)
nTreeSamplingEvents <- 10
nMutationSamplingEvents <- 100
distance <- computeClusterSplits(sampleDescription, postSampling, treeName, nCells,
nMutations, nClusters,
alleleCount,
mutatedReadCounts, totalReadCounts,
nMutationSamplingEvents = nMutationSamplingEvents, nTreeSamplingEvents = nTreeSamplingEvents)
source("functions.R")
input <- load_data(inputFolder, treeName)
postSampling <- input$postSampling
nClusters <- input$nClusters
ClusterID <- input$clusterID
nCells <- input$nCells
nMutations <- input$nMutations
nClusters <- input$nClusters
alleleCount <- input$alleleCount
mutatedReadCounts <- input$mutatedReadCounts
totalReadCounts <- input$totalReadCounts
sampleDescription <- input$sample_description
distance <- computeClusterSplits(sampleDescription, postSampling, treeName, nCells,
nMutations, nClusters,
alleleCount,
mutatedReadCounts, totalReadCounts,
nMutationSamplingEvents = nMutationSamplingEvents, nTreeSamplingEvents = nTreeSamplingEvents)
knitr::opts_chunk$set(echo = TRUE)
inputFolder <- "../../input_folder"
treeName <- "Br16_B"
source("functions.R")
input <- load_data(inputFolder, treeName)
postSampling <- input$postSampling
nClusters <- input$nClusters
ClusterID <- input$clusterID
nCells <- input$nCells
nMutations <- input$nMutations
nClusters <- input$nClusters
alleleCount <- input$alleleCount
mutatedReadCounts <- input$mutatedReadCounts
totalReadCounts <- input$totalReadCounts
sampleDescription <- input$sample_description
print(sampleDescription)
x_values <- seq(0.01, 0.5, by = 0.01)
y_values <- 1 / x_values
curve_data <- data.frame(x = x_values, y = y_values)
data.frame(x = mutatedReadCounts %>% sapply(function(x){sum(x!=0)/length(x)})) %>%
ggplot(aes(x = x)) + geom_histogram(binwidth = 0.01) +
geom_line(data = curve_data, aes(x = x, y = y), color = "red", size = 1)
totalReadCounts <- totalReadCounts[(mutatedReadCounts %>% sapply(function(x){sum(x!=0)})) > 0]
mutatedReadCounts <- mutatedReadCounts[(mutatedReadCounts %>% sapply(function(x){sum(x!=0)})) > 0]
nMutations <- length(totalReadCounts)
candidate_pairs <- load_monoclonal_pairs(inputFolder, treeName)
print(candidate_pairs$monoclonal_pairs)
print(candidate_pairs$distance_matrix)
tumor_cells <- paste0((sampleDescription %>% filter(color == "gray93"))$ClusterName,".realigned.bam")
print(candidate_pairs$full_distance_matrix[tumor_cells,tumor_cells])
which((candidate_pairs$full_distance_matrix[tumor_cells,tumor_cells] == 3))
monoclonal_pairs <- list(c("Br16_B8","Br16_B2"), c("Br16_B51", "Br16_B32"), c("Br16_B54", "Br16_B35"), c("Br16_B51","Br16_B52"))
candidate_pairs$full_distance_matrix[c("Br16_B32.realigned.bam", "Br16_B51.realigned.bam","Br16_B52.realigned.bam"),c("Br16_B32.realigned.bam", "Br16_B51.realigned.bam","Br16_B52.realigned.bam")]
nTreeSamplingEvents <- 10
nMutationSamplingEvents <- 100
distance <- computeClusterSplits(sampleDescription, postSampling, treeName, nCells,
nMutations, nClusters,
alleleCount,
mutatedReadCounts, totalReadCounts,
nMutationSamplingEvents = nMutationSamplingEvents, nTreeSamplingEvents = nTreeSamplingEvents, cellPairSelection = monoclonal_pairs)
distance <- computeClusterSplits(sampleDescription, postSampling, treeName, nCells,
nMutations, nClusters,
alleleCount,
mutatedReadCounts, totalReadCounts,
nMutationSamplingEvents = nMutationSamplingEvents, nTreeSamplingEvents = nTreeSamplingEvents)
>>>>>>> Stashed changes
