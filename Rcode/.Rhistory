print(paste(paste("Computing genomic distances of leaves:", i, sep = " "), j, sep = " "))
distance <- c(distance, produce_Distance_Posterior(i,j,postSampling, treeName, nCells,
nMutations, nClusters,
alleleCount,sampleDescription$Cluster,
mutatedReadCounts, totalReadCounts,sampleDescription$WBC, nSamplingEvents = 1000))
clusterIdentityofdistance <- c(clusterIdentityofdistance, c-1)
j <- j + 1
#cluster_done <- 1
}
}
}
)
system.time(
for(it in CTCclusters){
cellsInCluster <- which(sampleDescription$color %in% it)-1 ## Make sure array indication is
## compatible with cpp
#cluster_done <- 0
for(i in cellsInCluster){
# if(cluster_done == 1){
#  cluster_done <- 0
#  break
#}
if(sampleDescription$WBC[i+1] == 1) next
j <- cellsInCluster[1]
while(j < i){
#if(cluster_done == 1){
#  break
#}
if(sampleDescription$WBC[j+1] == 1){
j <- j + 1
next
}
print(paste(paste("Computing genomic distances of leaves:", i, sep = " "), j, sep = " "))
distance <- c(distance, produce_Distance_Posterior(i,j,postSampling, treeName, nCells,
nMutations, nClusters,
alleleCount,sampleDescription$Cluster,
mutatedReadCounts, totalReadCounts,sampleDescription$WBC, nSamplingEvents = 1000, clusterName = it))
clusterIdentityofdistance <- c(clusterIdentityofdistance, c-1)
j <- j + 1
#cluster_done <- 1
}
}
}
)
source("functions.R")
############
#Config
############
inputFolder <- "../../input_folder"
treeName <- "Br7"
############
#Data preprocessing
############
input <- load_data(inputFolder, treeName)
postSampling <- input$postSampling
nClusters <- input$nClusters
ClusterID <- input$clusterID
nCells <- input$nCells
nMutations <- input$nMutations
nClusters <- input$nClusters
alleleCount <- input$alleleCount
mutatedReadCounts <- input$mutatedReadCounts
totalReadCounts <- input$totalReadCounts
sampleDescription <- input$sample_description
desired_values <- sample(1:length(postSampling), size = 100, replace = FALSE) %>% sort()
postSampling <- postSampling[desired_values]
CTCclusters <- unique(sampleDescription$color)
CTCclusters <- CTCclusters[!(CTCclusters %in% c("ghostwhite","gray93"))]
system.time(
for(it in CTCclusters){
cellsInCluster <- which(sampleDescription$color %in% it)-1 ## Make sure array indication is
## compatible with cpp
#cluster_done <- 0
for(i in cellsInCluster){
# if(cluster_done == 1){
#  cluster_done <- 0
#  break
#}
if(sampleDescription$WBC[i+1] == 1) next
j <- cellsInCluster[1]
while(j < i){
#if(cluster_done == 1){
#  break
#}
if(sampleDescription$WBC[j+1] == 1){
j <- j + 1
next
}
print(paste(paste("Computing genomic distances of leaves:", i, sep = " "), j, sep = " "))
distance <- c(distance, produce_Distance_Posterior(i,j,postSampling, treeName, nCells,
nMutations, nClusters,
alleleCount,sampleDescription$Cluster,
mutatedReadCounts, totalReadCounts,sampleDescription$WBC, nSamplingEvents = 1000, clusterName = it))
clusterIdentityofdistance <- c(clusterIdentityofdistance, c-1)
j <- j + 1
#cluster_done <- 1
}
}
}
)
computeClusterSplits <- function(sampleDescription, postSampling, treeName, nCells,
nMutations, nClusters,
alleleCount,
mutatedReadCounts, totalReadCounts,
nMutationSamplingEvents = 1000, nTreeSamplingEvents = 500){
desired_values <- sample(1:length(postSampling), size = nSamplingEvents, replace = FALSE) %>% sort()
postSampling <- postSampling[desired_values]
CTCclusters <- unique(sampleDescription$color)
CTCclusters <- CTCclusters[!(CTCclusters %in% c("ghostwhite","gray93"))]
system.time(
for(it in CTCclusters){
cellsInCluster <- which(sampleDescription$color %in% it)-1 ## Make sure array indication is
## compatible with cpp
#cluster_done <- 0
for(i in cellsInCluster){
# if(cluster_done == 1){
#  cluster_done <- 0
#  break
#}
if(sampleDescription$WBC[i+1] == 1) next
j <- cellsInCluster[1]
while(j < i){
#if(cluster_done == 1){
#  break
#}
if(sampleDescription$WBC[j+1] == 1){
j <- j + 1
next
}
print(paste(paste("Computing genomic distances of leaves:", i, sep = " "), j, sep = " "))
distance <- c(distance, produce_Distance_Posterior(i,j,postSampling, treeName, nCells,
nMutations, nClusters,
alleleCount,sampleDescription$Cluster,
mutatedReadCounts, totalReadCounts,sampleDescription$WBC, nSamplingEvents = nMutationSamplingEvents, clusterName = it))
clusterIdentityofdistance <- c(clusterIdentityofdistance, c-1)
j <- j + 1
#cluster_done <- 1
}
}
}
)
}
computeClusterSplits(sampleDescription, postSampling, treeName, nCells,
nMutations, nClusters,
alleleCount,
mutatedReadCounts, totalReadCounts,
nMutationSamplingEvents = 1000, nTreeSamplingEvents = 500)
source("functions.R")
############
#Config
############
inputFolder <- "../../input_folder"
treeName <- "Br7"
############
#Data preprocessing
############
input <- load_data(inputFolder, treeName)
postSampling <- input$postSampling
nClusters <- input$nClusters
ClusterID <- input$clusterID
nCells <- input$nCells
nMutations <- input$nMutations
nClusters <- input$nClusters
alleleCount <- input$alleleCount
mutatedReadCounts <- input$mutatedReadCounts
totalReadCounts <- input$totalReadCounts
sampleDescription <- input$sample_description
computeClusterSplits <- function(sampleDescription, postSampling, treeName, nCells,
nMutations, nClusters,
alleleCount,
mutatedReadCounts, totalReadCounts,
nMutationSamplingEvents = 1000, nTreeSamplingEvents = 500){
desired_values <- sample(1:length(postSampling), size = nSamplingEvents, replace = FALSE) %>% sort()
postSampling <- postSampling[desired_values]
CTCclusters <- unique(sampleDescription$color)
CTCclusters <- CTCclusters[!(CTCclusters %in% c("ghostwhite","gray93"))]
system.time(
for(it in CTCclusters){
cellsInCluster <- which(sampleDescription$color %in% it)-1 ## Make sure array indication is
## compatible with cpp
#cluster_done <- 0
for(i in cellsInCluster){
# if(cluster_done == 1){
#  cluster_done <- 0
#  break
#}
if(sampleDescription$WBC[i+1] == 1) next
j <- cellsInCluster[1]
while(j < i){
#if(cluster_done == 1){
#  break
#}
if(sampleDescription$WBC[j+1] == 1){
j <- j + 1
next
}
print(paste(paste("Computing genomic distances of leaves:", i, sep = " "), j, sep = " "))
distance <- c(distance, produce_Distance_Posterior(i,j,postSampling, treeName, nCells,
nMutations, nClusters,
alleleCount,sampleDescription$Cluster,
mutatedReadCounts, totalReadCounts,sampleDescription$WBC, nSamplingEvents = nMutationSamplingEvents, clusterName = it))
clusterIdentityofdistance <- c(clusterIdentityofdistance, c-1)
j <- j + 1
#cluster_done <- 1
}
}
}
)
}
computeClusterSplits(sampleDescription, postSampling, treeName, nCells,
nMutations, nClusters,
alleleCount,
mutatedReadCounts, totalReadCounts,
nMutationSamplingEvents = 1000, nTreeSamplingEvents = 500)
computeClusterSplits <- function(sampleDescription, postSampling, treeName, nCells,
nMutations, nClusters,
alleleCount,
mutatedReadCounts, totalReadCounts,
nMutationSamplingEvents = 1000, nTreeSamplingEvents = 500){
desired_values <- sample(1:length(postSampling), size = nTreeSamplingEvents, replace = FALSE) %>% sort()
postSampling <- postSampling[desired_values]
CTCclusters <- unique(sampleDescription$color)
CTCclusters <- CTCclusters[!(CTCclusters %in% c("ghostwhite","gray93"))]
system.time(
for(it in CTCclusters){
cellsInCluster <- which(sampleDescription$color %in% it)-1 ## Make sure array indication is
## compatible with cpp
#cluster_done <- 0
for(i in cellsInCluster){
# if(cluster_done == 1){
#  cluster_done <- 0
#  break
#}
if(sampleDescription$WBC[i+1] == 1) next
j <- cellsInCluster[1]
while(j < i){
#if(cluster_done == 1){
#  break
#}
if(sampleDescription$WBC[j+1] == 1){
j <- j + 1
next
}
print(paste(paste("Computing genomic distances of leaves:", i, sep = " "), j, sep = " "))
distance <- c(distance, produce_Distance_Posterior(i,j,postSampling, treeName, nCells,
nMutations, nClusters,
alleleCount,sampleDescription$Cluster,
mutatedReadCounts, totalReadCounts,sampleDescription$WBC, nSamplingEvents = nMutationSamplingEvents, clusterName = it))
clusterIdentityofdistance <- c(clusterIdentityofdistance, c-1)
j <- j + 1
#cluster_done <- 1
}
}
}
)
}
computeClusterSplits(sampleDescription, postSampling, treeName, nCells,
nMutations, nClusters,
alleleCount,
mutatedReadCounts, totalReadCounts,
nMutationSamplingEvents = 1000, nTreeSamplingEvents = 500)
sampleDescription
library(tidyverse)
data <- read_delim('../../input_folder/Pr9/Pr9_genotypes.ped', delim = '\t',col_names = FALSE)
View(data)
data2 <- data %>% select(!2:6)
distance_matrix <- matrix(0, nrow = nrow(data2), ncol = nrow(data2))
for(i in 1:nrow(data2)){
j <- 1
while(j < i){
row_i <- data2 %>% select(!1) %>% slice(i)
row_j <- data2 %>% select(!1) %>% slice(j)
distance_matrix[i,j] <- sum(!(row_i == row_j))
j <- j+1
}
}
distance_vector <- as.vector(distance_matrix[lower.tri(distance_matrix)])
monoclonal_candidate_cutoff <- quantile(distance_vector, probs = 0.01)
sum(distance_vector <= monoclonal_candidate_cutoff)
which(distance_vector <= monoclonal_candidate_cutoff)
ggplot(data.frame(x = distance_vector),aes(x = x))+
geom_histogram(binwidth = 2) +
geom_vline(xintercept = monoclonal_candidate_cutoff, linetype = "dashed", color = "red")
candidates <- list()
iterator <- 0
number_of_output_pairs <- 15
for (count in 0:monoclonal_candidate_cutoff){
all_elements <- which(distance_matrix == count)
print(paste0(paste0("_________________Pairs of distance ", count),"_________________"))
all_elements_list <- list()
for (it in all_elements){
coordinates1 <- ((it-1) %% dim(distance_matrix)[2]) + 1
coordinates2 <- ((it-1) %/% dim(distance_matrix)[2]) + 1
all_elements_list <- append(all_elements_list, list(c(coordinates1, coordinates2)))
}
for (it in all_elements_list){
if(it[1] <= it[2]) next
print("Pair of cells:")
candidates <- c(candidates,list(c(as.character(data2[it[1],1]),as.character(data2[it[2],1]))))
iterator <- iterator + 1
if(iterator == number_of_output_pairs) break
}
if(iterator == number_of_output_pairs) break
}
candidates
data2
data <- read_delim('../../input_folder/Pr9/Pr9_genotypes.ped', delim = '\t',col_names = FALSE)
View(data)
data2 <- data %>% select(!2:6)
distance_matrix <- matrix(0, nrow = nrow(data2), ncol = nrow(data2))
for(i in 1:nrow(data2)){
j <- 1
while(j < i){
row_i <- data2 %>% select(!1) %>% slice(i)
row_j <- data2 %>% select(!1) %>% slice(j)
distance_matrix[i,j] <- sum(!(row_i == row_j))
j <- j+1
}
}
distance_vector <- as.vector(distance_matrix[lower.tri(distance_matrix)])
monoclonal_candidate_cutoff <- quantile(distance_vector, probs = 0.01)
sum(distance_vector <= monoclonal_candidate_cutoff)
which(distance_vector <= monoclonal_candidate_cutoff)
ggplot(data.frame(x = distance_vector),aes(x = x))+
geom_histogram(binwidth = 2) +
geom_vline(xintercept = monoclonal_candidate_cutoff, linetype = "dashed", color = "red")
candidates <- list()
iterator <- 0
number_of_output_pairs <- 15
for (count in 0:monoclonal_candidate_cutoff){
all_elements <- which(distance_matrix == count)
print(paste0(paste0("_________________Pairs of distance ", count),"_________________"))
all_elements_list <- list()
for (it in all_elements){
coordinates1 <- ((it-1) %% dim(distance_matrix)[2]) + 1
coordinates2 <- ((it-1) %/% dim(distance_matrix)[2]) + 1
all_elements_list <- append(all_elements_list, list(c(coordinates1, coordinates2)))
}
for (it in all_elements_list){
if(it[1] <= it[2]) next
print("Pair of cells:")
candidates <- c(candidates,list(c(as.character(data2[it[1],1]),as.character(data2[it[2],1]))))
candidate_index <- c(candidate_index, it[1], it[2])
iterator <- iterator + 1
if(iterator == number_of_output_pairs) break
}
if(iterator == number_of_output_pairs) break
}
candidate_index <- vector()
iterator <- 0
number_of_output_pairs <- 15
for (count in 0:monoclonal_candidate_cutoff){
all_elements <- which(distance_matrix == count)
print(paste0(paste0("_________________Pairs of distance ", count),"_________________"))
all_elements_list <- list()
for (it in all_elements){
coordinates1 <- ((it-1) %% dim(distance_matrix)[2]) + 1
coordinates2 <- ((it-1) %/% dim(distance_matrix)[2]) + 1
all_elements_list <- append(all_elements_list, list(c(coordinates1, coordinates2)))
}
for (it in all_elements_list){
if(it[1] <= it[2]) next
print("Pair of cells:")
candidates <- c(candidates,list(c(as.character(data2[it[1],1]),as.character(data2[it[2],1]))))
candidate_index <- c(candidate_index, it[1], it[2])
iterator <- iterator + 1
if(iterator == number_of_output_pairs) break
}
if(iterator == number_of_output_pairs) break
}
candidate_index
distance_matrix2 <- distance_matrix[candidate_index,candidate_index]
distance_matrix2
distance_matrix[25,24]
distance_matrix
candidate_index
order(candidate_index)
distance_matrix2 <- distance_matrix[order(candidate_index),order(candidate_index)]
distance_matrix[25,24]
distance_matrix2
distance_matrix
distance_matrix2 <- distance_matrix[candidate_index,candidate_index]
distance_matrix2
candidate_index
distance_matrix2 <- distance_matrix[order(candidate_index),order(candidate_index)]
distance_matrix2
distance_matrix
distance_matrix2 <- distance_matrix[candidate_index,candidate_index]
distance_matrix2
candidate_index
distance_matrix[15,24]
distance_matrix[25,24]
candidate_index
distance_matrix[25,16]
distance_matrix[25,5]
distance_matrix[24,5]
distance_matrix[216,5]
distance_matrix[16,5]
candidate_index
order(candidate_index)
sort(candidate_index)
distance_matrix2 <- distance_matrix[sort(candidate_index),sort(candidate_index)]
distance_matrix2
?sample
colnames(distance_matrix2)
colnames(distance_matrix2) <- sort(candidate_index)
colnames(distance_matrix2)
load_monoclonal_pairs <- function(inputFolder, treeName){
data <- read_delim('../../input_folder/Pr9/Pr9_genotypes.ped', delim = '\t',col_names = FALSE)
posteriorSamplingFile <-  sprintf("%s/%s/%s_postSampling.tsv", inputFolder, treeName,treeName)
data <- sprintf("%s/%s/%s_genotype.ped", inputFolder, treeName,treeName)
View(data)
data2 <- data %>% select(!2:6)
distance_matrix <- matrix(0, nrow = nrow(data2), ncol = nrow(data2))
for(i in 1:nrow(data2)){
j <- 1
while(j < i){
row_i <- data2 %>% select(!1) %>% slice(i)
row_j <- data2 %>% select(!1) %>% slice(j)
distance_matrix[i,j] <- sum(!(row_i == row_j))
j <- j+1
}
}
distance_vector <- as.vector(distance_matrix[lower.tri(distance_matrix)])
monoclonal_candidate_cutoff <- quantile(distance_vector, probs = 0.01)
sum(distance_vector <= monoclonal_candidate_cutoff)
which(distance_vector <= monoclonal_candidate_cutoff)
ggplot(data.frame(x = distance_vector),aes(x = x))+
geom_histogram(binwidth = 2) +
geom_vline(xintercept = monoclonal_candidate_cutoff, linetype = "dashed", color = "red")
candidates <- list()
candidate_index <- vector()
iterator <- 0
number_of_output_pairs <- 15
for (count in 0:monoclonal_candidate_cutoff){
all_elements <- which(distance_matrix == count)
all_elements_list <- list()
for (it in all_elements){
coordinates1 <- ((it-1) %% dim(distance_matrix)[2]) + 1
coordinates2 <- ((it-1) %/% dim(distance_matrix)[2]) + 1
all_elements_list <- append(all_elements_list, list(c(coordinates1, coordinates2)))
}
for (it in all_elements_list){
if(it[1] <= it[2]) next
print("Pair of cells:")
candidates <- c(candidates,list(c(as.character(data2[it[1],1]),as.character(data2[it[2],1]))))
candidate_index <- c(candidate_index, it[1], it[2])
iterator <- iterator + 1
if(iterator == number_of_output_pairs) break
}
if(iterator == number_of_output_pairs) break
}
distance_matrix2 <- distance_matrix[sort(candidate_index),sort(candidate_index)]
colnames(distance_matrix2) <- sort(candidate_index)
return(list(monoclonal_pairs = candidates, distance_matrix = distance_matrix2))
}
load_monoclonal_pairs(inputFolder, treeName)
load_monoclonal_pairs <- function(inputFolder, treeName){
data_file <- sprintf("%s/%s/%s_genotype.ped", inputFolder, treeName,treeName)
data <- read_delim(data_file, delim = '\t',col_names = FALSE)
View(data)
data2 <- data %>% select(!2:6)
distance_matrix <- matrix(0, nrow = nrow(data2), ncol = nrow(data2))
for(i in 1:nrow(data2)){
j <- 1
while(j < i){
row_i <- data2 %>% select(!1) %>% slice(i)
row_j <- data2 %>% select(!1) %>% slice(j)
distance_matrix[i,j] <- sum(!(row_i == row_j))
j <- j+1
}
}
distance_vector <- as.vector(distance_matrix[lower.tri(distance_matrix)])
monoclonal_candidate_cutoff <- quantile(distance_vector, probs = 0.01)
sum(distance_vector <= monoclonal_candidate_cutoff)
which(distance_vector <= monoclonal_candidate_cutoff)
ggplot(data.frame(x = distance_vector),aes(x = x))+
geom_histogram(binwidth = 2) +
geom_vline(xintercept = monoclonal_candidate_cutoff, linetype = "dashed", color = "red")
candidates <- list()
candidate_index <- vector()
iterator <- 0
number_of_output_pairs <- 15
for (count in 0:monoclonal_candidate_cutoff){
all_elements <- which(distance_matrix == count)
all_elements_list <- list()
for (it in all_elements){
coordinates1 <- ((it-1) %% dim(distance_matrix)[2]) + 1
coordinates2 <- ((it-1) %/% dim(distance_matrix)[2]) + 1
all_elements_list <- append(all_elements_list, list(c(coordinates1, coordinates2)))
}
for (it in all_elements_list){
if(it[1] <= it[2]) next
print("Pair of cells:")
candidates <- c(candidates,list(c(as.character(data2[it[1],1]),as.character(data2[it[2],1]))))
candidate_index <- c(candidate_index, it[1], it[2])
iterator <- iterator + 1
if(iterator == number_of_output_pairs) break
}
if(iterator == number_of_output_pairs) break
}
distance_matrix2 <- distance_matrix[sort(candidate_index),sort(candidate_index)]
colnames(distance_matrix2) <- sort(candidate_index)
return(list(monoclonal_pairs = candidates, distance_matrix = distance_matrix2))
}
load_monoclonal_pairs(inputFolder, treeName)
treeName <- "Pr9"
load_monoclonal_pairs(inputFolder, treeName)
treeName
data_file <- sprintf("%s/%s/%s_genotype.ped", inputFolder, treeName,treeName)
data_file
data <- read_delim(data_file, delim = '\t',col_names = FALSE)
